# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.  # noqa: E501

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import hashicorp_vault_client
from api.system_api import SystemApi  # noqa: E501
from hashicorp_vault_client.rest import ApiException


class TestSystemApi(unittest.TestCase):
    """SystemApi unit test stubs"""

    def setUp(self):
        self.api = api.system_api.SystemApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_delete_sys_audit_path(self):
        """Test case for delete_sys_audit_path

        Disable the audit device at the given path.  # noqa: E501
        """
        pass

    def test_delete_sys_auth_path(self):
        """Test case for delete_sys_auth_path

        Disable the auth method at the given auth path  # noqa: E501
        """
        pass

    def test_delete_sys_config_auditing_request_headers_header(self):
        """Test case for delete_sys_config_auditing_request_headers_header

        Disable auditing of the given request header.  # noqa: E501
        """
        pass

    def test_delete_sys_config_control_group(self):
        """Test case for delete_sys_config_control_group

        Configure control group global settings.  # noqa: E501
        """
        pass

    def test_delete_sys_config_cors(self):
        """Test case for delete_sys_config_cors

        Remove any CORS settings.  # noqa: E501
        """
        pass

    def test_delete_sys_config_ui_headers_header(self):
        """Test case for delete_sys_config_ui_headers_header

        Remove a UI header.  # noqa: E501
        """
        pass

    def test_delete_sys_generate_root(self):
        """Test case for delete_sys_generate_root

        Cancels any in-progress root generation attempt.  # noqa: E501
        """
        pass

    def test_delete_sys_generate_root_attempt(self):
        """Test case for delete_sys_generate_root_attempt

        Cancels any in-progress root generation attempt.  # noqa: E501
        """
        pass

    def test_delete_sys_mfa_method_duo_name(self):
        """Test case for delete_sys_mfa_method_duo_name

        Defines or updates a Duo MFA method.  # noqa: E501
        """
        pass

    def test_delete_sys_mfa_method_okta_name(self):
        """Test case for delete_sys_mfa_method_okta_name

        Defines or updates an Okta MFA method.  # noqa: E501
        """
        pass

    def test_delete_sys_mfa_method_pingid_name(self):
        """Test case for delete_sys_mfa_method_pingid_name

        Defines or updates a PingID MFA method.  # noqa: E501
        """
        pass

    def test_delete_sys_mfa_method_totp_name(self):
        """Test case for delete_sys_mfa_method_totp_name

        Defines or updates a TOTP MFA method.  # noqa: E501
        """
        pass

    def test_delete_sys_mounts_path(self):
        """Test case for delete_sys_mounts_path

        Disable the mount point specified at the given path.  # noqa: E501
        """
        pass

    def test_delete_sys_namespaces_path(self):
        """Test case for delete_sys_namespaces_path

        """
        pass

    def test_delete_sys_plugins_catalog_name(self):
        """Test case for delete_sys_plugins_catalog_name

        Remove the plugin with the given name.  # noqa: E501
        """
        pass

    def test_delete_sys_plugins_catalog_type_name(self):
        """Test case for delete_sys_plugins_catalog_type_name

        Remove the plugin with the given name.  # noqa: E501
        """
        pass

    def test_delete_sys_policies_acl_name(self):
        """Test case for delete_sys_policies_acl_name

        Delete the ACL policy with the given name.  # noqa: E501
        """
        pass

    def test_delete_sys_policies_egp_name(self):
        """Test case for delete_sys_policies_egp_name

        Read, Modify, or Delete an access control policy.  # noqa: E501
        """
        pass

    def test_delete_sys_policies_rgp_name(self):
        """Test case for delete_sys_policies_rgp_name

        Read, Modify, or Delete an access control policy.  # noqa: E501
        """
        pass

    def test_delete_sys_policy_name(self):
        """Test case for delete_sys_policy_name

        Delete the policy with the given name.  # noqa: E501
        """
        pass

    def test_delete_sys_rekey_backup(self):
        """Test case for delete_sys_rekey_backup

        Delete the backup copy of PGP-encrypted unseal keys.  # noqa: E501
        """
        pass

    def test_delete_sys_rekey_init(self):
        """Test case for delete_sys_rekey_init

        Cancels any in-progress rekey.  # noqa: E501
        """
        pass

    def test_delete_sys_rekey_recovery_key_backup(self):
        """Test case for delete_sys_rekey_recovery_key_backup

        Allows fetching or deleting the backup of the rotated unseal keys.  # noqa: E501
        """
        pass

    def test_delete_sys_rekey_verify(self):
        """Test case for delete_sys_rekey_verify

        Cancel any in-progress rekey verification operation.  # noqa: E501
        """
        pass

    def test_delete_sys_replication_performance_primary_mount_filter_id(self):
        """Test case for delete_sys_replication_performance_primary_mount_filter_id

        """
        pass

    def test_get_sys_audit(self):
        """Test case for get_sys_audit

        List the enabled audit devices.  # noqa: E501
        """
        pass

    def test_get_sys_auth(self):
        """Test case for get_sys_auth

        List the currently enabled credential backends.  # noqa: E501
        """
        pass

    def test_get_sys_auth_path_tune(self):
        """Test case for get_sys_auth_path_tune

        Reads the given auth path's configuration.  # noqa: E501
        """
        pass

    def test_get_sys_config_auditing_request_headers(self):
        """Test case for get_sys_config_auditing_request_headers

        List the request headers that are configured to be audited.  # noqa: E501
        """
        pass

    def test_get_sys_config_auditing_request_headers_header(self):
        """Test case for get_sys_config_auditing_request_headers_header

        List the information for the given request header.  # noqa: E501
        """
        pass

    def test_get_sys_config_control_group(self):
        """Test case for get_sys_config_control_group

        Configure control group global settings.  # noqa: E501
        """
        pass

    def test_get_sys_config_cors(self):
        """Test case for get_sys_config_cors

        Return the current CORS settings.  # noqa: E501
        """
        pass

    def test_get_sys_config_ui_headers(self):
        """Test case for get_sys_config_ui_headers

        Return a list of configured UI headers.  # noqa: E501
        """
        pass

    def test_get_sys_config_ui_headers_header(self):
        """Test case for get_sys_config_ui_headers_header

        Return the given UI header's configuration  # noqa: E501
        """
        pass

    def test_get_sys_generate_root(self):
        """Test case for get_sys_generate_root

        Read the configuration and progress of the current root generation attempt.  # noqa: E501
        """
        pass

    def test_get_sys_generate_root_attempt(self):
        """Test case for get_sys_generate_root_attempt

        Read the configuration and progress of the current root generation attempt.  # noqa: E501
        """
        pass

    def test_get_sys_health(self):
        """Test case for get_sys_health

        Returns the health status of Vault.  # noqa: E501
        """
        pass

    def test_get_sys_init(self):
        """Test case for get_sys_init

        Returns the initialization status of Vault.  # noqa: E501
        """
        pass

    def test_get_sys_internal_specs_openapi(self):
        """Test case for get_sys_internal_specs_openapi

        Generate an OpenAPI 3 document of all mounted paths.  # noqa: E501
        """
        pass

    def test_get_sys_internal_ui_mounts(self):
        """Test case for get_sys_internal_ui_mounts

        Lists all enabled and visible auth and secrets mounts.  # noqa: E501
        """
        pass

    def test_get_sys_internal_ui_mounts_path(self):
        """Test case for get_sys_internal_ui_mounts_path

        Return information about the given mount.  # noqa: E501
        """
        pass

    def test_get_sys_key_status(self):
        """Test case for get_sys_key_status

        Provides information about the backend encryption key.  # noqa: E501
        """
        pass

    def test_get_sys_leader(self):
        """Test case for get_sys_leader

        Returns the high availability status and current leader instance of Vault.  # noqa: E501
        """
        pass

    def test_get_sys_leases_lookup(self):
        """Test case for get_sys_leases_lookup

        Returns a list of lease ids.  # noqa: E501
        """
        pass

    def test_get_sys_leases_lookup_prefix(self):
        """Test case for get_sys_leases_lookup_prefix

        Returns a list of lease ids.  # noqa: E501
        """
        pass

    def test_get_sys_license(self):
        """Test case for get_sys_license

        The path responds to the following HTTP methods.      GET /         Returns information on the installed license      POST         Sets the license for the server  # noqa: E501
        """
        pass

    def test_get_sys_metrics(self):
        """Test case for get_sys_metrics

        Export the metrics aggregated for telemetry purpose.  # noqa: E501
        """
        pass

    def test_get_sys_mfa_method(self):
        """Test case for get_sys_mfa_method

        Lists all the available MFA methods by their name.  # noqa: E501
        """
        pass

    def test_get_sys_mfa_method_duo_name(self):
        """Test case for get_sys_mfa_method_duo_name

        Defines or updates a Duo MFA method.  # noqa: E501
        """
        pass

    def test_get_sys_mfa_method_okta_name(self):
        """Test case for get_sys_mfa_method_okta_name

        Defines or updates an Okta MFA method.  # noqa: E501
        """
        pass

    def test_get_sys_mfa_method_pingid_name(self):
        """Test case for get_sys_mfa_method_pingid_name

        Defines or updates a PingID MFA method.  # noqa: E501
        """
        pass

    def test_get_sys_mfa_method_totp_name(self):
        """Test case for get_sys_mfa_method_totp_name

        Defines or updates a TOTP MFA method.  # noqa: E501
        """
        pass

    def test_get_sys_mfa_method_totp_name_generate(self):
        """Test case for get_sys_mfa_method_totp_name_generate

        Generates a TOTP secret for the given method name on the entity of the   calling token.  # noqa: E501
        """
        pass

    def test_get_sys_mounts(self):
        """Test case for get_sys_mounts

        List the currently mounted backends.  # noqa: E501
        """
        pass

    def test_get_sys_mounts_path_tune(self):
        """Test case for get_sys_mounts_path_tune

        Tune backend configuration parameters for this mount.  # noqa: E501
        """
        pass

    def test_get_sys_namespaces(self):
        """Test case for get_sys_namespaces

        """
        pass

    def test_get_sys_namespaces_path(self):
        """Test case for get_sys_namespaces_path

        """
        pass

    def test_get_sys_plugins_catalog(self):
        """Test case for get_sys_plugins_catalog

        Lists all the plugins known to Vault  # noqa: E501
        """
        pass

    def test_get_sys_plugins_catalog_name(self):
        """Test case for get_sys_plugins_catalog_name

        Return the configuration data for the plugin with the given name.  # noqa: E501
        """
        pass

    def test_get_sys_plugins_catalog_type(self):
        """Test case for get_sys_plugins_catalog_type

        List the plugins in the catalog.  # noqa: E501
        """
        pass

    def test_get_sys_plugins_catalog_type_name(self):
        """Test case for get_sys_plugins_catalog_type_name

        Return the configuration data for the plugin with the given name.  # noqa: E501
        """
        pass

    def test_get_sys_policies_acl(self):
        """Test case for get_sys_policies_acl

        List the configured access control policies.  # noqa: E501
        """
        pass

    def test_get_sys_policies_acl_name(self):
        """Test case for get_sys_policies_acl_name

        Retrieve information about the named ACL policy.  # noqa: E501
        """
        pass

    def test_get_sys_policies_egp(self):
        """Test case for get_sys_policies_egp

        List the configured access control policies.  # noqa: E501
        """
        pass

    def test_get_sys_policies_egp_name(self):
        """Test case for get_sys_policies_egp_name

        Read, Modify, or Delete an access control policy.  # noqa: E501
        """
        pass

    def test_get_sys_policies_rgp(self):
        """Test case for get_sys_policies_rgp

        List the configured access control policies.  # noqa: E501
        """
        pass

    def test_get_sys_policies_rgp_name(self):
        """Test case for get_sys_policies_rgp_name

        Read, Modify, or Delete an access control policy.  # noqa: E501
        """
        pass

    def test_get_sys_policy(self):
        """Test case for get_sys_policy

        List the configured access control policies.  # noqa: E501
        """
        pass

    def test_get_sys_policy_name(self):
        """Test case for get_sys_policy_name

        Retrieve the policy body for the named policy.  # noqa: E501
        """
        pass

    def test_get_sys_rekey_backup(self):
        """Test case for get_sys_rekey_backup

        Return the backup copy of PGP-encrypted unseal keys.  # noqa: E501
        """
        pass

    def test_get_sys_rekey_init(self):
        """Test case for get_sys_rekey_init

        Reads the configuration and progress of the current rekey attempt.  # noqa: E501
        """
        pass

    def test_get_sys_rekey_recovery_key_backup(self):
        """Test case for get_sys_rekey_recovery_key_backup

        Allows fetching or deleting the backup of the rotated unseal keys.  # noqa: E501
        """
        pass

    def test_get_sys_rekey_verify(self):
        """Test case for get_sys_rekey_verify

        Read the configuration and progress of the current rekey verification attempt.  # noqa: E501
        """
        pass

    def test_get_sys_replication_dr_secondary_license(self):
        """Test case for get_sys_replication_dr_secondary_license

        The path responds to the following HTTP methods.      GET /         Returns information on the installed license      POST         Sets the license for the server  # noqa: E501
        """
        pass

    def test_get_sys_replication_dr_status(self):
        """Test case for get_sys_replication_dr_status

        """
        pass

    def test_get_sys_replication_performance_primary_mount_filter_id(self):
        """Test case for get_sys_replication_performance_primary_mount_filter_id

        """
        pass

    def test_get_sys_replication_performance_status(self):
        """Test case for get_sys_replication_performance_status

        """
        pass

    def test_get_sys_replication_status(self):
        """Test case for get_sys_replication_status

        """
        pass

    def test_get_sys_seal_status(self):
        """Test case for get_sys_seal_status

        Check the seal status of a Vault.  # noqa: E501
        """
        pass

    def test_get_sys_wrapping_lookup(self):
        """Test case for get_sys_wrapping_lookup

        Look up wrapping properties for the requester's token.  # noqa: E501
        """
        pass

    def test_post_sys_audit_hash_path(self):
        """Test case for post_sys_audit_hash_path

        The hash of the given string via the given audit backend  # noqa: E501
        """
        pass

    def test_post_sys_audit_path(self):
        """Test case for post_sys_audit_path

        Enable a new audit device at the supplied path.  # noqa: E501
        """
        pass

    def test_post_sys_auth_path(self):
        """Test case for post_sys_auth_path

        Enables a new auth method.  # noqa: E501
        """
        pass

    def test_post_sys_auth_path_tune(self):
        """Test case for post_sys_auth_path_tune

        Tune configuration parameters for a given auth path.  # noqa: E501
        """
        pass

    def test_post_sys_capabilities(self):
        """Test case for post_sys_capabilities

        Fetches the capabilities of the given token on the given path.  # noqa: E501
        """
        pass

    def test_post_sys_capabilities_accessor(self):
        """Test case for post_sys_capabilities_accessor

        Fetches the capabilities of the token associated with the given token, on the given path.  # noqa: E501
        """
        pass

    def test_post_sys_capabilities_self(self):
        """Test case for post_sys_capabilities_self

        Fetches the capabilities of the given token on the given path.  # noqa: E501
        """
        pass

    def test_post_sys_config_auditing_request_headers_header(self):
        """Test case for post_sys_config_auditing_request_headers_header

        Enable auditing of a header.  # noqa: E501
        """
        pass

    def test_post_sys_config_control_group(self):
        """Test case for post_sys_config_control_group

        Configure control group global settings.  # noqa: E501
        """
        pass

    def test_post_sys_config_cors(self):
        """Test case for post_sys_config_cors

        Configure the CORS settings.  # noqa: E501
        """
        pass

    def test_post_sys_config_ui_headers_header(self):
        """Test case for post_sys_config_ui_headers_header

        Configure the values to be returned for the UI header.  # noqa: E501
        """
        pass

    def test_post_sys_control_group_authorize(self):
        """Test case for post_sys_control_group_authorize

        Authorize a control group request  # noqa: E501
        """
        pass

    def test_post_sys_control_group_request(self):
        """Test case for post_sys_control_group_request

        Check the status of a control group request  # noqa: E501
        """
        pass

    def test_post_sys_generate_root(self):
        """Test case for post_sys_generate_root

        Initializes a new root generation attempt.  # noqa: E501
        """
        pass

    def test_post_sys_generate_root_attempt(self):
        """Test case for post_sys_generate_root_attempt

        Initializes a new root generation attempt.  # noqa: E501
        """
        pass

    def test_post_sys_generate_root_update(self):
        """Test case for post_sys_generate_root_update

        Enter a single master key share to progress the root generation attempt.  # noqa: E501
        """
        pass

    def test_post_sys_init(self):
        """Test case for post_sys_init

        Initialize a new Vault.  # noqa: E501
        """
        pass

    def test_post_sys_leases_lookup(self):
        """Test case for post_sys_leases_lookup

        Retrieve lease metadata.  # noqa: E501
        """
        pass

    def test_post_sys_leases_renew(self):
        """Test case for post_sys_leases_renew

        Renews a lease, requesting to extend the lease.  # noqa: E501
        """
        pass

    def test_post_sys_leases_renew_url_lease_id(self):
        """Test case for post_sys_leases_renew_url_lease_id

        Renews a lease, requesting to extend the lease.  # noqa: E501
        """
        pass

    def test_post_sys_leases_revoke(self):
        """Test case for post_sys_leases_revoke

        Revokes a lease immediately.  # noqa: E501
        """
        pass

    def test_post_sys_leases_revoke_force_prefix(self):
        """Test case for post_sys_leases_revoke_force_prefix

        Revokes all secrets or tokens generated under a given prefix immediately  # noqa: E501
        """
        pass

    def test_post_sys_leases_revoke_prefix_prefix(self):
        """Test case for post_sys_leases_revoke_prefix_prefix

        Revokes all secrets (via a lease ID prefix) or tokens (via the tokens' path property) generated under a given prefix immediately.  # noqa: E501
        """
        pass

    def test_post_sys_leases_revoke_url_lease_id(self):
        """Test case for post_sys_leases_revoke_url_lease_id

        Revokes a lease immediately.  # noqa: E501
        """
        pass

    def test_post_sys_leases_tidy(self):
        """Test case for post_sys_leases_tidy

        This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.  # noqa: E501
        """
        pass

    def test_post_sys_license(self):
        """Test case for post_sys_license

        The path responds to the following HTTP methods.      GET /         Returns information on the installed license      POST         Sets the license for the server  # noqa: E501
        """
        pass

    def test_post_sys_mfa_method_duo_name(self):
        """Test case for post_sys_mfa_method_duo_name

        Defines or updates a Duo MFA method.  # noqa: E501
        """
        pass

    def test_post_sys_mfa_method_okta_name(self):
        """Test case for post_sys_mfa_method_okta_name

        Defines or updates an Okta MFA method.  # noqa: E501
        """
        pass

    def test_post_sys_mfa_method_pingid_name(self):
        """Test case for post_sys_mfa_method_pingid_name

        Defines or updates a PingID MFA method.  # noqa: E501
        """
        pass

    def test_post_sys_mfa_method_totp_name(self):
        """Test case for post_sys_mfa_method_totp_name

        Defines or updates a TOTP MFA method.  # noqa: E501
        """
        pass

    def test_post_sys_mfa_method_totp_name_admin_destroy(self):
        """Test case for post_sys_mfa_method_totp_name_admin_destroy

        Deletes the TOTP secret for the given method name on the given entity.  # noqa: E501
        """
        pass

    def test_post_sys_mfa_method_totp_name_admin_generate(self):
        """Test case for post_sys_mfa_method_totp_name_admin_generate

        Generates a TOTP secret for the given method name on the given entity.  # noqa: E501
        """
        pass

    def test_post_sys_mounts_path(self):
        """Test case for post_sys_mounts_path

        Enable a new secrets engine at the given path.  # noqa: E501
        """
        pass

    def test_post_sys_mounts_path_tune(self):
        """Test case for post_sys_mounts_path_tune

        Tune backend configuration parameters for this mount.  # noqa: E501
        """
        pass

    def test_post_sys_namespaces_path(self):
        """Test case for post_sys_namespaces_path

        """
        pass

    def test_post_sys_plugins_catalog_name(self):
        """Test case for post_sys_plugins_catalog_name

        Register a new plugin, or updates an existing one with the supplied name.  # noqa: E501
        """
        pass

    def test_post_sys_plugins_catalog_type_name(self):
        """Test case for post_sys_plugins_catalog_type_name

        Register a new plugin, or updates an existing one with the supplied name.  # noqa: E501
        """
        pass

    def test_post_sys_plugins_reload_backend(self):
        """Test case for post_sys_plugins_reload_backend

        Reload mounted plugin backends.  # noqa: E501
        """
        pass

    def test_post_sys_policies_acl_name(self):
        """Test case for post_sys_policies_acl_name

        Add a new or update an existing ACL policy.  # noqa: E501
        """
        pass

    def test_post_sys_policies_egp_name(self):
        """Test case for post_sys_policies_egp_name

        Read, Modify, or Delete an access control policy.  # noqa: E501
        """
        pass

    def test_post_sys_policies_rgp_name(self):
        """Test case for post_sys_policies_rgp_name

        Read, Modify, or Delete an access control policy.  # noqa: E501
        """
        pass

    def test_post_sys_policy_name(self):
        """Test case for post_sys_policy_name

        Add a new or update an existing policy.  # noqa: E501
        """
        pass

    def test_post_sys_rekey_init(self):
        """Test case for post_sys_rekey_init

        Initializes a new rekey attempt.  # noqa: E501
        """
        pass

    def test_post_sys_rekey_update(self):
        """Test case for post_sys_rekey_update

        Enter a single master key share to progress the rekey of the Vault.  # noqa: E501
        """
        pass

    def test_post_sys_rekey_verify(self):
        """Test case for post_sys_rekey_verify

        Enter a single new key share to progress the rekey verification operation.  # noqa: E501
        """
        pass

    def test_post_sys_remount(self):
        """Test case for post_sys_remount

        Move the mount point of an already-mounted backend.  # noqa: E501
        """
        pass

    def test_post_sys_renew(self):
        """Test case for post_sys_renew

        Renews a lease, requesting to extend the lease.  # noqa: E501
        """
        pass

    def test_post_sys_renew_url_lease_id(self):
        """Test case for post_sys_renew_url_lease_id

        Renews a lease, requesting to extend the lease.  # noqa: E501
        """
        pass

    def test_post_sys_replication_dr_primary_demote(self):
        """Test case for post_sys_replication_dr_primary_demote

        """
        pass

    def test_post_sys_replication_dr_primary_disable(self):
        """Test case for post_sys_replication_dr_primary_disable

        """
        pass

    def test_post_sys_replication_dr_primary_enable(self):
        """Test case for post_sys_replication_dr_primary_enable

        """
        pass

    def test_post_sys_replication_dr_primary_revoke_secondary(self):
        """Test case for post_sys_replication_dr_primary_revoke_secondary

        """
        pass

    def test_post_sys_replication_dr_primary_secondary_token(self):
        """Test case for post_sys_replication_dr_primary_secondary_token

        """
        pass

    def test_post_sys_replication_dr_secondary_disable(self):
        """Test case for post_sys_replication_dr_secondary_disable

        """
        pass

    def test_post_sys_replication_dr_secondary_enable(self):
        """Test case for post_sys_replication_dr_secondary_enable

        """
        pass

    def test_post_sys_replication_dr_secondary_generate_public_key(self):
        """Test case for post_sys_replication_dr_secondary_generate_public_key

        """
        pass

    def test_post_sys_replication_dr_secondary_license(self):
        """Test case for post_sys_replication_dr_secondary_license

        The path responds to the following HTTP methods.      GET /         Returns information on the installed license      POST         Sets the license for the server  # noqa: E501
        """
        pass

    def test_post_sys_replication_dr_secondary_operation_token_delete(self):
        """Test case for post_sys_replication_dr_secondary_operation_token_delete

        """
        pass

    def test_post_sys_replication_dr_secondary_promote(self):
        """Test case for post_sys_replication_dr_secondary_promote

        """
        pass

    def test_post_sys_replication_dr_secondary_reindex(self):
        """Test case for post_sys_replication_dr_secondary_reindex

        """
        pass

    def test_post_sys_replication_dr_secondary_update_primary(self):
        """Test case for post_sys_replication_dr_secondary_update_primary

        """
        pass

    def test_post_sys_replication_performance_primary_demote(self):
        """Test case for post_sys_replication_performance_primary_demote

        """
        pass

    def test_post_sys_replication_performance_primary_disable(self):
        """Test case for post_sys_replication_performance_primary_disable

        """
        pass

    def test_post_sys_replication_performance_primary_enable(self):
        """Test case for post_sys_replication_performance_primary_enable

        """
        pass

    def test_post_sys_replication_performance_primary_mount_filter_id(self):
        """Test case for post_sys_replication_performance_primary_mount_filter_id

        """
        pass

    def test_post_sys_replication_performance_primary_revoke_secondary(self):
        """Test case for post_sys_replication_performance_primary_revoke_secondary

        """
        pass

    def test_post_sys_replication_performance_primary_secondary_token(self):
        """Test case for post_sys_replication_performance_primary_secondary_token

        """
        pass

    def test_post_sys_replication_performance_secondary_disable(self):
        """Test case for post_sys_replication_performance_secondary_disable

        """
        pass

    def test_post_sys_replication_performance_secondary_enable(self):
        """Test case for post_sys_replication_performance_secondary_enable

        """
        pass

    def test_post_sys_replication_performance_secondary_generate_public_key(self):
        """Test case for post_sys_replication_performance_secondary_generate_public_key

        """
        pass

    def test_post_sys_replication_performance_secondary_promote(self):
        """Test case for post_sys_replication_performance_secondary_promote

        """
        pass

    def test_post_sys_replication_performance_secondary_update_primary(self):
        """Test case for post_sys_replication_performance_secondary_update_primary

        """
        pass

    def test_post_sys_replication_primary_demote(self):
        """Test case for post_sys_replication_primary_demote

        """
        pass

    def test_post_sys_replication_primary_disable(self):
        """Test case for post_sys_replication_primary_disable

        """
        pass

    def test_post_sys_replication_primary_enable(self):
        """Test case for post_sys_replication_primary_enable

        """
        pass

    def test_post_sys_replication_primary_revoke_secondary(self):
        """Test case for post_sys_replication_primary_revoke_secondary

        """
        pass

    def test_post_sys_replication_primary_secondary_token(self):
        """Test case for post_sys_replication_primary_secondary_token

        """
        pass

    def test_post_sys_replication_recover(self):
        """Test case for post_sys_replication_recover

        """
        pass

    def test_post_sys_replication_reindex(self):
        """Test case for post_sys_replication_reindex

        """
        pass

    def test_post_sys_replication_secondary_disable(self):
        """Test case for post_sys_replication_secondary_disable

        """
        pass

    def test_post_sys_replication_secondary_enable(self):
        """Test case for post_sys_replication_secondary_enable

        """
        pass

    def test_post_sys_replication_secondary_promote(self):
        """Test case for post_sys_replication_secondary_promote

        """
        pass

    def test_post_sys_replication_secondary_update_primary(self):
        """Test case for post_sys_replication_secondary_update_primary

        """
        pass

    def test_post_sys_revoke(self):
        """Test case for post_sys_revoke

        Revokes a lease immediately.  # noqa: E501
        """
        pass

    def test_post_sys_revoke_force_prefix(self):
        """Test case for post_sys_revoke_force_prefix

        Revokes all secrets or tokens generated under a given prefix immediately  # noqa: E501
        """
        pass

    def test_post_sys_revoke_prefix_prefix(self):
        """Test case for post_sys_revoke_prefix_prefix

        Revokes all secrets (via a lease ID prefix) or tokens (via the tokens' path property) generated under a given prefix immediately.  # noqa: E501
        """
        pass

    def test_post_sys_revoke_url_lease_id(self):
        """Test case for post_sys_revoke_url_lease_id

        Revokes a lease immediately.  # noqa: E501
        """
        pass

    def test_post_sys_rotate(self):
        """Test case for post_sys_rotate

        Rotates the backend encryption key used to persist data.  # noqa: E501
        """
        pass

    def test_post_sys_seal(self):
        """Test case for post_sys_seal

        Seal the Vault.  # noqa: E501
        """
        pass

    def test_post_sys_step_down(self):
        """Test case for post_sys_step_down

        Cause the node to give up active status.  # noqa: E501
        """
        pass

    def test_post_sys_tools_hash(self):
        """Test case for post_sys_tools_hash

        Generate a hash sum for input data  # noqa: E501
        """
        pass

    def test_post_sys_tools_hash_urlalgorithm(self):
        """Test case for post_sys_tools_hash_urlalgorithm

        Generate a hash sum for input data  # noqa: E501
        """
        pass

    def test_post_sys_tools_random(self):
        """Test case for post_sys_tools_random

        Generate random bytes  # noqa: E501
        """
        pass

    def test_post_sys_tools_random_urlbytes(self):
        """Test case for post_sys_tools_random_urlbytes

        Generate random bytes  # noqa: E501
        """
        pass

    def test_post_sys_unseal(self):
        """Test case for post_sys_unseal

        Unseal the Vault.  # noqa: E501
        """
        pass

    def test_post_sys_wrapping_lookup(self):
        """Test case for post_sys_wrapping_lookup

        Look up wrapping properties for the given token.  # noqa: E501
        """
        pass

    def test_post_sys_wrapping_rewrap(self):
        """Test case for post_sys_wrapping_rewrap

        Rotates a response-wrapped token.  # noqa: E501
        """
        pass

    def test_post_sys_wrapping_unwrap(self):
        """Test case for post_sys_wrapping_unwrap

        Unwraps a response-wrapped token.  # noqa: E501
        """
        pass

    def test_post_sys_wrapping_wrap(self):
        """Test case for post_sys_wrapping_wrap

        Response-wraps an arbitrary JSON object.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
