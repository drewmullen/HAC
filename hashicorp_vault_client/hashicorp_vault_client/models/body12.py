# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.  # noqa: E501

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body12(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_entity_aliases': 'list[str]',
        'allowed_policies': 'list[str]',
        'bound_cidrs': 'list[str]',
        'disallowed_policies': 'list[str]',
        'explicit_max_ttl': 'int',
        'orphan': 'bool',
        'path_suffix': 'str',
        'period': 'int',
        'renewable': 'bool',
        'token_bound_cidrs': 'list[str]',
        'token_explicit_max_ttl': 'int',
        'token_no_default_policy': 'bool',
        'token_num_uses': 'int',
        'token_period': 'int',
        'token_type': 'str'
    }

    attribute_map = {
        'allowed_entity_aliases': 'allowed_entity_aliases',
        'allowed_policies': 'allowed_policies',
        'bound_cidrs': 'bound_cidrs',
        'disallowed_policies': 'disallowed_policies',
        'explicit_max_ttl': 'explicit_max_ttl',
        'orphan': 'orphan',
        'path_suffix': 'path_suffix',
        'period': 'period',
        'renewable': 'renewable',
        'token_bound_cidrs': 'token_bound_cidrs',
        'token_explicit_max_ttl': 'token_explicit_max_ttl',
        'token_no_default_policy': 'token_no_default_policy',
        'token_num_uses': 'token_num_uses',
        'token_period': 'token_period',
        'token_type': 'token_type'
    }

    def __init__(self, allowed_entity_aliases=None, allowed_policies=None, bound_cidrs=None, disallowed_policies=None, explicit_max_ttl=None, orphan=None, path_suffix=None, period=None, renewable=True, token_bound_cidrs=None, token_explicit_max_ttl=None, token_no_default_policy=None, token_num_uses=None, token_period=None, token_type='default-service'):  # noqa: E501
        """Body12 - a model defined in Swagger"""  # noqa: E501
        self._allowed_entity_aliases = None
        self._allowed_policies = None
        self._bound_cidrs = None
        self._disallowed_policies = None
        self._explicit_max_ttl = None
        self._orphan = None
        self._path_suffix = None
        self._period = None
        self._renewable = None
        self._token_bound_cidrs = None
        self._token_explicit_max_ttl = None
        self._token_no_default_policy = None
        self._token_num_uses = None
        self._token_period = None
        self._token_type = None
        self.discriminator = None
        if allowed_entity_aliases is not None:
            self.allowed_entity_aliases = allowed_entity_aliases
        if allowed_policies is not None:
            self.allowed_policies = allowed_policies
        if bound_cidrs is not None:
            self.bound_cidrs = bound_cidrs
        if disallowed_policies is not None:
            self.disallowed_policies = disallowed_policies
        if explicit_max_ttl is not None:
            self.explicit_max_ttl = explicit_max_ttl
        if orphan is not None:
            self.orphan = orphan
        if path_suffix is not None:
            self.path_suffix = path_suffix
        if period is not None:
            self.period = period
        if renewable is not None:
            self.renewable = renewable
        if token_bound_cidrs is not None:
            self.token_bound_cidrs = token_bound_cidrs
        if token_explicit_max_ttl is not None:
            self.token_explicit_max_ttl = token_explicit_max_ttl
        if token_no_default_policy is not None:
            self.token_no_default_policy = token_no_default_policy
        if token_num_uses is not None:
            self.token_num_uses = token_num_uses
        if token_period is not None:
            self.token_period = token_period
        if token_type is not None:
            self.token_type = token_type

    @property
    def allowed_entity_aliases(self):
        """Gets the allowed_entity_aliases of this Body12.  # noqa: E501

        String or JSON list of allowed entity aliases. If set, specifies the entity aliases which are allowed to be used during token generation. This field supports globbing.  # noqa: E501

        :return: The allowed_entity_aliases of this Body12.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_entity_aliases

    @allowed_entity_aliases.setter
    def allowed_entity_aliases(self, allowed_entity_aliases):
        """Sets the allowed_entity_aliases of this Body12.

        String or JSON list of allowed entity aliases. If set, specifies the entity aliases which are allowed to be used during token generation. This field supports globbing.  # noqa: E501

        :param allowed_entity_aliases: The allowed_entity_aliases of this Body12.  # noqa: E501
        :type: list[str]
        """

        self._allowed_entity_aliases = allowed_entity_aliases

    @property
    def allowed_policies(self):
        """Gets the allowed_policies of this Body12.  # noqa: E501

        If set, tokens can be created with any subset of the policies in this list, rather than the normal semantics of tokens being a subset of the calling token's policies. The parameter is a comma-delimited string of policy names.  # noqa: E501

        :return: The allowed_policies of this Body12.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_policies

    @allowed_policies.setter
    def allowed_policies(self, allowed_policies):
        """Sets the allowed_policies of this Body12.

        If set, tokens can be created with any subset of the policies in this list, rather than the normal semantics of tokens being a subset of the calling token's policies. The parameter is a comma-delimited string of policy names.  # noqa: E501

        :param allowed_policies: The allowed_policies of this Body12.  # noqa: E501
        :type: list[str]
        """

        self._allowed_policies = allowed_policies

    @property
    def bound_cidrs(self):
        """Gets the bound_cidrs of this Body12.  # noqa: E501

        Use 'token_bound_cidrs' instead.  # noqa: E501

        :return: The bound_cidrs of this Body12.  # noqa: E501
        :rtype: list[str]
        """
        return self._bound_cidrs

    @bound_cidrs.setter
    def bound_cidrs(self, bound_cidrs):
        """Sets the bound_cidrs of this Body12.

        Use 'token_bound_cidrs' instead.  # noqa: E501

        :param bound_cidrs: The bound_cidrs of this Body12.  # noqa: E501
        :type: list[str]
        """

        self._bound_cidrs = bound_cidrs

    @property
    def disallowed_policies(self):
        """Gets the disallowed_policies of this Body12.  # noqa: E501

        If set, successful token creation via this role will require that no policies in the given list are requested. The parameter is a comma-delimited string of policy names.  # noqa: E501

        :return: The disallowed_policies of this Body12.  # noqa: E501
        :rtype: list[str]
        """
        return self._disallowed_policies

    @disallowed_policies.setter
    def disallowed_policies(self, disallowed_policies):
        """Sets the disallowed_policies of this Body12.

        If set, successful token creation via this role will require that no policies in the given list are requested. The parameter is a comma-delimited string of policy names.  # noqa: E501

        :param disallowed_policies: The disallowed_policies of this Body12.  # noqa: E501
        :type: list[str]
        """

        self._disallowed_policies = disallowed_policies

    @property
    def explicit_max_ttl(self):
        """Gets the explicit_max_ttl of this Body12.  # noqa: E501

        Use 'token_explicit_max_ttl' instead.  # noqa: E501

        :return: The explicit_max_ttl of this Body12.  # noqa: E501
        :rtype: int
        """
        return self._explicit_max_ttl

    @explicit_max_ttl.setter
    def explicit_max_ttl(self, explicit_max_ttl):
        """Sets the explicit_max_ttl of this Body12.

        Use 'token_explicit_max_ttl' instead.  # noqa: E501

        :param explicit_max_ttl: The explicit_max_ttl of this Body12.  # noqa: E501
        :type: int
        """

        self._explicit_max_ttl = explicit_max_ttl

    @property
    def orphan(self):
        """Gets the orphan of this Body12.  # noqa: E501

        If true, tokens created via this role will be orphan tokens (have no parent)  # noqa: E501

        :return: The orphan of this Body12.  # noqa: E501
        :rtype: bool
        """
        return self._orphan

    @orphan.setter
    def orphan(self, orphan):
        """Sets the orphan of this Body12.

        If true, tokens created via this role will be orphan tokens (have no parent)  # noqa: E501

        :param orphan: The orphan of this Body12.  # noqa: E501
        :type: bool
        """

        self._orphan = orphan

    @property
    def path_suffix(self):
        """Gets the path_suffix of this Body12.  # noqa: E501

        If set, tokens created via this role will contain the given suffix as a part of their path. This can be used to assist use of the 'revoke-prefix' endpoint later on. The given suffix must match the regular expression.\\w[\\w-.]+\\w  # noqa: E501

        :return: The path_suffix of this Body12.  # noqa: E501
        :rtype: str
        """
        return self._path_suffix

    @path_suffix.setter
    def path_suffix(self, path_suffix):
        """Sets the path_suffix of this Body12.

        If set, tokens created via this role will contain the given suffix as a part of their path. This can be used to assist use of the 'revoke-prefix' endpoint later on. The given suffix must match the regular expression.\\w[\\w-.]+\\w  # noqa: E501

        :param path_suffix: The path_suffix of this Body12.  # noqa: E501
        :type: str
        """

        self._path_suffix = path_suffix

    @property
    def period(self):
        """Gets the period of this Body12.  # noqa: E501

        Use 'token_period' instead.  # noqa: E501

        :return: The period of this Body12.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Body12.

        Use 'token_period' instead.  # noqa: E501

        :param period: The period of this Body12.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def renewable(self):
        """Gets the renewable of this Body12.  # noqa: E501

        Tokens created via this role will be renewable or not according to this value. Defaults to \"true\".  # noqa: E501

        :return: The renewable of this Body12.  # noqa: E501
        :rtype: bool
        """
        return self._renewable

    @renewable.setter
    def renewable(self, renewable):
        """Sets the renewable of this Body12.

        Tokens created via this role will be renewable or not according to this value. Defaults to \"true\".  # noqa: E501

        :param renewable: The renewable of this Body12.  # noqa: E501
        :type: bool
        """

        self._renewable = renewable

    @property
    def token_bound_cidrs(self):
        """Gets the token_bound_cidrs of this Body12.  # noqa: E501

        Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.  # noqa: E501

        :return: The token_bound_cidrs of this Body12.  # noqa: E501
        :rtype: list[str]
        """
        return self._token_bound_cidrs

    @token_bound_cidrs.setter
    def token_bound_cidrs(self, token_bound_cidrs):
        """Sets the token_bound_cidrs of this Body12.

        Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.  # noqa: E501

        :param token_bound_cidrs: The token_bound_cidrs of this Body12.  # noqa: E501
        :type: list[str]
        """

        self._token_bound_cidrs = token_bound_cidrs

    @property
    def token_explicit_max_ttl(self):
        """Gets the token_explicit_max_ttl of this Body12.  # noqa: E501

        If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.  # noqa: E501

        :return: The token_explicit_max_ttl of this Body12.  # noqa: E501
        :rtype: int
        """
        return self._token_explicit_max_ttl

    @token_explicit_max_ttl.setter
    def token_explicit_max_ttl(self, token_explicit_max_ttl):
        """Sets the token_explicit_max_ttl of this Body12.

        If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.  # noqa: E501

        :param token_explicit_max_ttl: The token_explicit_max_ttl of this Body12.  # noqa: E501
        :type: int
        """

        self._token_explicit_max_ttl = token_explicit_max_ttl

    @property
    def token_no_default_policy(self):
        """Gets the token_no_default_policy of this Body12.  # noqa: E501

        If true, the 'default' policy will not automatically be added to generated tokens  # noqa: E501

        :return: The token_no_default_policy of this Body12.  # noqa: E501
        :rtype: bool
        """
        return self._token_no_default_policy

    @token_no_default_policy.setter
    def token_no_default_policy(self, token_no_default_policy):
        """Sets the token_no_default_policy of this Body12.

        If true, the 'default' policy will not automatically be added to generated tokens  # noqa: E501

        :param token_no_default_policy: The token_no_default_policy of this Body12.  # noqa: E501
        :type: bool
        """

        self._token_no_default_policy = token_no_default_policy

    @property
    def token_num_uses(self):
        """Gets the token_num_uses of this Body12.  # noqa: E501

        The maximum number of times a token may be used, a value of zero means unlimited  # noqa: E501

        :return: The token_num_uses of this Body12.  # noqa: E501
        :rtype: int
        """
        return self._token_num_uses

    @token_num_uses.setter
    def token_num_uses(self, token_num_uses):
        """Sets the token_num_uses of this Body12.

        The maximum number of times a token may be used, a value of zero means unlimited  # noqa: E501

        :param token_num_uses: The token_num_uses of this Body12.  # noqa: E501
        :type: int
        """

        self._token_num_uses = token_num_uses

    @property
    def token_period(self):
        """Gets the token_period of this Body12.  # noqa: E501

        If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. \"24h\").  # noqa: E501

        :return: The token_period of this Body12.  # noqa: E501
        :rtype: int
        """
        return self._token_period

    @token_period.setter
    def token_period(self, token_period):
        """Sets the token_period of this Body12.

        If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. \"24h\").  # noqa: E501

        :param token_period: The token_period of this Body12.  # noqa: E501
        :type: int
        """

        self._token_period = token_period

    @property
    def token_type(self):
        """Gets the token_type of this Body12.  # noqa: E501

        The type of token to generate, service or batch  # noqa: E501

        :return: The token_type of this Body12.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this Body12.

        The type of token to generate, service or batch  # noqa: E501

        :param token_type: The token_type of this Body12.  # noqa: E501
        :type: str
        """

        self._token_type = token_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body12, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body12):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
