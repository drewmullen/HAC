# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.  # noqa: E501

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body57(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pgp_keys': 'list[str]',
        'recovery_pgp_keys': 'list[str]',
        'recovery_shares': 'int',
        'recovery_threshold': 'int',
        'root_token_pgp_key': 'str',
        'secret_shares': 'int',
        'secret_threshold': 'int',
        'stored_shares': 'int'
    }

    attribute_map = {
        'pgp_keys': 'pgp_keys',
        'recovery_pgp_keys': 'recovery_pgp_keys',
        'recovery_shares': 'recovery_shares',
        'recovery_threshold': 'recovery_threshold',
        'root_token_pgp_key': 'root_token_pgp_key',
        'secret_shares': 'secret_shares',
        'secret_threshold': 'secret_threshold',
        'stored_shares': 'stored_shares'
    }

    def __init__(self, pgp_keys=None, recovery_pgp_keys=None, recovery_shares=None, recovery_threshold=None, root_token_pgp_key=None, secret_shares=None, secret_threshold=None, stored_shares=None):  # noqa: E501
        """Body57 - a model defined in Swagger"""  # noqa: E501
        self._pgp_keys = None
        self._recovery_pgp_keys = None
        self._recovery_shares = None
        self._recovery_threshold = None
        self._root_token_pgp_key = None
        self._secret_shares = None
        self._secret_threshold = None
        self._stored_shares = None
        self.discriminator = None
        if pgp_keys is not None:
            self.pgp_keys = pgp_keys
        if recovery_pgp_keys is not None:
            self.recovery_pgp_keys = recovery_pgp_keys
        if recovery_shares is not None:
            self.recovery_shares = recovery_shares
        if recovery_threshold is not None:
            self.recovery_threshold = recovery_threshold
        if root_token_pgp_key is not None:
            self.root_token_pgp_key = root_token_pgp_key
        if secret_shares is not None:
            self.secret_shares = secret_shares
        if secret_threshold is not None:
            self.secret_threshold = secret_threshold
        if stored_shares is not None:
            self.stored_shares = stored_shares

    @property
    def pgp_keys(self):
        """Gets the pgp_keys of this Body57.  # noqa: E501

        Specifies an array of PGP public keys used to encrypt the output unseal keys. Ordering is preserved. The keys must be base64-encoded from their original binary representation. The size of this array must be the same as `secret_shares`.  # noqa: E501

        :return: The pgp_keys of this Body57.  # noqa: E501
        :rtype: list[str]
        """
        return self._pgp_keys

    @pgp_keys.setter
    def pgp_keys(self, pgp_keys):
        """Sets the pgp_keys of this Body57.

        Specifies an array of PGP public keys used to encrypt the output unseal keys. Ordering is preserved. The keys must be base64-encoded from their original binary representation. The size of this array must be the same as `secret_shares`.  # noqa: E501

        :param pgp_keys: The pgp_keys of this Body57.  # noqa: E501
        :type: list[str]
        """

        self._pgp_keys = pgp_keys

    @property
    def recovery_pgp_keys(self):
        """Gets the recovery_pgp_keys of this Body57.  # noqa: E501

        Specifies an array of PGP public keys used to encrypt the output recovery keys. Ordering is preserved. The keys must be base64-encoded from their original binary representation. The size of this array must be the same as `recovery_shares`.  # noqa: E501

        :return: The recovery_pgp_keys of this Body57.  # noqa: E501
        :rtype: list[str]
        """
        return self._recovery_pgp_keys

    @recovery_pgp_keys.setter
    def recovery_pgp_keys(self, recovery_pgp_keys):
        """Sets the recovery_pgp_keys of this Body57.

        Specifies an array of PGP public keys used to encrypt the output recovery keys. Ordering is preserved. The keys must be base64-encoded from their original binary representation. The size of this array must be the same as `recovery_shares`.  # noqa: E501

        :param recovery_pgp_keys: The recovery_pgp_keys of this Body57.  # noqa: E501
        :type: list[str]
        """

        self._recovery_pgp_keys = recovery_pgp_keys

    @property
    def recovery_shares(self):
        """Gets the recovery_shares of this Body57.  # noqa: E501

        Specifies the number of shares to split the recovery key into.  # noqa: E501

        :return: The recovery_shares of this Body57.  # noqa: E501
        :rtype: int
        """
        return self._recovery_shares

    @recovery_shares.setter
    def recovery_shares(self, recovery_shares):
        """Sets the recovery_shares of this Body57.

        Specifies the number of shares to split the recovery key into.  # noqa: E501

        :param recovery_shares: The recovery_shares of this Body57.  # noqa: E501
        :type: int
        """

        self._recovery_shares = recovery_shares

    @property
    def recovery_threshold(self):
        """Gets the recovery_threshold of this Body57.  # noqa: E501

        Specifies the number of shares required to reconstruct the recovery key. This must be less than or equal to `recovery_shares`.  # noqa: E501

        :return: The recovery_threshold of this Body57.  # noqa: E501
        :rtype: int
        """
        return self._recovery_threshold

    @recovery_threshold.setter
    def recovery_threshold(self, recovery_threshold):
        """Sets the recovery_threshold of this Body57.

        Specifies the number of shares required to reconstruct the recovery key. This must be less than or equal to `recovery_shares`.  # noqa: E501

        :param recovery_threshold: The recovery_threshold of this Body57.  # noqa: E501
        :type: int
        """

        self._recovery_threshold = recovery_threshold

    @property
    def root_token_pgp_key(self):
        """Gets the root_token_pgp_key of this Body57.  # noqa: E501

        Specifies a PGP public key used to encrypt the initial root token. The key must be base64-encoded from its original binary representation.  # noqa: E501

        :return: The root_token_pgp_key of this Body57.  # noqa: E501
        :rtype: str
        """
        return self._root_token_pgp_key

    @root_token_pgp_key.setter
    def root_token_pgp_key(self, root_token_pgp_key):
        """Sets the root_token_pgp_key of this Body57.

        Specifies a PGP public key used to encrypt the initial root token. The key must be base64-encoded from its original binary representation.  # noqa: E501

        :param root_token_pgp_key: The root_token_pgp_key of this Body57.  # noqa: E501
        :type: str
        """

        self._root_token_pgp_key = root_token_pgp_key

    @property
    def secret_shares(self):
        """Gets the secret_shares of this Body57.  # noqa: E501

        Specifies the number of shares to split the master key into.  # noqa: E501

        :return: The secret_shares of this Body57.  # noqa: E501
        :rtype: int
        """
        return self._secret_shares

    @secret_shares.setter
    def secret_shares(self, secret_shares):
        """Sets the secret_shares of this Body57.

        Specifies the number of shares to split the master key into.  # noqa: E501

        :param secret_shares: The secret_shares of this Body57.  # noqa: E501
        :type: int
        """

        self._secret_shares = secret_shares

    @property
    def secret_threshold(self):
        """Gets the secret_threshold of this Body57.  # noqa: E501

        Specifies the number of shares required to reconstruct the master key. This must be less than or equal secret_shares. If using Vault HSM with auto-unsealing, this value must be the same as `secret_shares`.  # noqa: E501

        :return: The secret_threshold of this Body57.  # noqa: E501
        :rtype: int
        """
        return self._secret_threshold

    @secret_threshold.setter
    def secret_threshold(self, secret_threshold):
        """Sets the secret_threshold of this Body57.

        Specifies the number of shares required to reconstruct the master key. This must be less than or equal secret_shares. If using Vault HSM with auto-unsealing, this value must be the same as `secret_shares`.  # noqa: E501

        :param secret_threshold: The secret_threshold of this Body57.  # noqa: E501
        :type: int
        """

        self._secret_threshold = secret_threshold

    @property
    def stored_shares(self):
        """Gets the stored_shares of this Body57.  # noqa: E501

        Specifies the number of shares that should be encrypted by the HSM and stored for auto-unsealing. Currently must be the same as `secret_shares`.  # noqa: E501

        :return: The stored_shares of this Body57.  # noqa: E501
        :rtype: int
        """
        return self._stored_shares

    @stored_shares.setter
    def stored_shares(self, stored_shares):
        """Sets the stored_shares of this Body57.

        Specifies the number of shares that should be encrypted by the HSM and stored for auto-unsealing. Currently must be the same as `secret_shares`.  # noqa: E501

        :param stored_shares: The stored_shares of this Body57.  # noqa: E501
        :type: int
        """

        self._stored_shares = stored_shares

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body57, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body57):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
