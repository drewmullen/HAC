# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.  # noqa: E501

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body68(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'algorithm': 'str',
        'digits': 'int',
        'issuer': 'str',
        'key_size': 'int',
        'period': 'int',
        'qr_size': 'int',
        'skew': 'int'
    }

    attribute_map = {
        'algorithm': 'algorithm',
        'digits': 'digits',
        'issuer': 'issuer',
        'key_size': 'key_size',
        'period': 'period',
        'qr_size': 'qr_size',
        'skew': 'skew'
    }

    def __init__(self, algorithm='SHA1', digits=6, issuer=None, key_size=20, period=30, qr_size=200, skew=1):  # noqa: E501
        """Body68 - a model defined in Swagger"""  # noqa: E501
        self._algorithm = None
        self._digits = None
        self._issuer = None
        self._key_size = None
        self._period = None
        self._qr_size = None
        self._skew = None
        self.discriminator = None
        if algorithm is not None:
            self.algorithm = algorithm
        if digits is not None:
            self.digits = digits
        if issuer is not None:
            self.issuer = issuer
        if key_size is not None:
            self.key_size = key_size
        if period is not None:
            self.period = period
        if qr_size is not None:
            self.qr_size = qr_size
        if skew is not None:
            self.skew = skew

    @property
    def algorithm(self):
        """Gets the algorithm of this Body68.  # noqa: E501

        The hashing algorithm used to generate the TOTP token. Options include SHA1, SHA256 and SHA512.  # noqa: E501

        :return: The algorithm of this Body68.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this Body68.

        The hashing algorithm used to generate the TOTP token. Options include SHA1, SHA256 and SHA512.  # noqa: E501

        :param algorithm: The algorithm of this Body68.  # noqa: E501
        :type: str
        """

        self._algorithm = algorithm

    @property
    def digits(self):
        """Gets the digits of this Body68.  # noqa: E501

        The number of digits in the generated TOTP token. This value can either be 6 or 8.  # noqa: E501

        :return: The digits of this Body68.  # noqa: E501
        :rtype: int
        """
        return self._digits

    @digits.setter
    def digits(self, digits):
        """Sets the digits of this Body68.

        The number of digits in the generated TOTP token. This value can either be 6 or 8.  # noqa: E501

        :param digits: The digits of this Body68.  # noqa: E501
        :type: int
        """

        self._digits = digits

    @property
    def issuer(self):
        """Gets the issuer of this Body68.  # noqa: E501

        The name of the key's issuing organization.  # noqa: E501

        :return: The issuer of this Body68.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this Body68.

        The name of the key's issuing organization.  # noqa: E501

        :param issuer: The issuer of this Body68.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def key_size(self):
        """Gets the key_size of this Body68.  # noqa: E501

        Determines the size in bytes of the generated key.  # noqa: E501

        :return: The key_size of this Body68.  # noqa: E501
        :rtype: int
        """
        return self._key_size

    @key_size.setter
    def key_size(self, key_size):
        """Sets the key_size of this Body68.

        Determines the size in bytes of the generated key.  # noqa: E501

        :param key_size: The key_size of this Body68.  # noqa: E501
        :type: int
        """

        self._key_size = key_size

    @property
    def period(self):
        """Gets the period of this Body68.  # noqa: E501

        The length of time used to generate a counter for the TOTP token calculation.  # noqa: E501

        :return: The period of this Body68.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Body68.

        The length of time used to generate a counter for the TOTP token calculation.  # noqa: E501

        :param period: The period of this Body68.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def qr_size(self):
        """Gets the qr_size of this Body68.  # noqa: E501

        The pixel size of the generated square QR code.  # noqa: E501

        :return: The qr_size of this Body68.  # noqa: E501
        :rtype: int
        """
        return self._qr_size

    @qr_size.setter
    def qr_size(self, qr_size):
        """Sets the qr_size of this Body68.

        The pixel size of the generated square QR code.  # noqa: E501

        :param qr_size: The qr_size of this Body68.  # noqa: E501
        :type: int
        """

        self._qr_size = qr_size

    @property
    def skew(self):
        """Gets the skew of this Body68.  # noqa: E501

        The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.  # noqa: E501

        :return: The skew of this Body68.  # noqa: E501
        :rtype: int
        """
        return self._skew

    @skew.setter
    def skew(self, skew):
        """Sets the skew of this Body68.

        The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.  # noqa: E501

        :param skew: The skew of this Body68.  # noqa: E501
        :type: int
        """

        self._skew = skew

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body68, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body68):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
