# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.  # noqa: E501

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body65(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_hostname': 'str',
        'integration_key': 'str',
        'mount_accessor': 'str',
        'push_info': 'str',
        'secret_key': 'str',
        'username_format': 'str'
    }

    attribute_map = {
        'api_hostname': 'api_hostname',
        'integration_key': 'integration_key',
        'mount_accessor': 'mount_accessor',
        'push_info': 'push_info',
        'secret_key': 'secret_key',
        'username_format': 'username_format'
    }

    def __init__(self, api_hostname=None, integration_key=None, mount_accessor=None, push_info=None, secret_key=None, username_format=None):  # noqa: E501
        """Body65 - a model defined in Swagger"""  # noqa: E501
        self._api_hostname = None
        self._integration_key = None
        self._mount_accessor = None
        self._push_info = None
        self._secret_key = None
        self._username_format = None
        self.discriminator = None
        if api_hostname is not None:
            self.api_hostname = api_hostname
        if integration_key is not None:
            self.integration_key = integration_key
        if mount_accessor is not None:
            self.mount_accessor = mount_accessor
        if push_info is not None:
            self.push_info = push_info
        if secret_key is not None:
            self.secret_key = secret_key
        if username_format is not None:
            self.username_format = username_format

    @property
    def api_hostname(self):
        """Gets the api_hostname of this Body65.  # noqa: E501

        API host name for Duo.  # noqa: E501

        :return: The api_hostname of this Body65.  # noqa: E501
        :rtype: str
        """
        return self._api_hostname

    @api_hostname.setter
    def api_hostname(self, api_hostname):
        """Sets the api_hostname of this Body65.

        API host name for Duo.  # noqa: E501

        :param api_hostname: The api_hostname of this Body65.  # noqa: E501
        :type: str
        """

        self._api_hostname = api_hostname

    @property
    def integration_key(self):
        """Gets the integration_key of this Body65.  # noqa: E501

        Integration key for Duo.  # noqa: E501

        :return: The integration_key of this Body65.  # noqa: E501
        :rtype: str
        """
        return self._integration_key

    @integration_key.setter
    def integration_key(self, integration_key):
        """Sets the integration_key of this Body65.

        Integration key for Duo.  # noqa: E501

        :param integration_key: The integration_key of this Body65.  # noqa: E501
        :type: str
        """

        self._integration_key = integration_key

    @property
    def mount_accessor(self):
        """Gets the mount_accessor of this Body65.  # noqa: E501

        The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.  # noqa: E501

        :return: The mount_accessor of this Body65.  # noqa: E501
        :rtype: str
        """
        return self._mount_accessor

    @mount_accessor.setter
    def mount_accessor(self, mount_accessor):
        """Sets the mount_accessor of this Body65.

        The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.  # noqa: E501

        :param mount_accessor: The mount_accessor of this Body65.  # noqa: E501
        :type: str
        """

        self._mount_accessor = mount_accessor

    @property
    def push_info(self):
        """Gets the push_info of this Body65.  # noqa: E501

        Push information for Duo.  # noqa: E501

        :return: The push_info of this Body65.  # noqa: E501
        :rtype: str
        """
        return self._push_info

    @push_info.setter
    def push_info(self, push_info):
        """Sets the push_info of this Body65.

        Push information for Duo.  # noqa: E501

        :param push_info: The push_info of this Body65.  # noqa: E501
        :type: str
        """

        self._push_info = push_info

    @property
    def secret_key(self):
        """Gets the secret_key of this Body65.  # noqa: E501

        Secret key for Duo.  # noqa: E501

        :return: The secret_key of this Body65.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this Body65.

        Secret key for Duo.  # noqa: E501

        :param secret_key: The secret_key of this Body65.  # noqa: E501
        :type: str
        """

        self._secret_key = secret_key

    @property
    def username_format(self):
        """Gets the username_format of this Body65.  # noqa: E501

        A format string for mapping Identity names to MFA method names. Values to subtitute should be placed in {{}}. For example, \"{{alias.name}}@example.com\". Currently-supported mappings: alias.name: The name returned by the mount configured via the mount_accessor parameter If blank, the Alias's name field will be used as-is.  # noqa: E501

        :return: The username_format of this Body65.  # noqa: E501
        :rtype: str
        """
        return self._username_format

    @username_format.setter
    def username_format(self, username_format):
        """Sets the username_format of this Body65.

        A format string for mapping Identity names to MFA method names. Values to subtitute should be placed in {{}}. For example, \"{{alias.name}}@example.com\". Currently-supported mappings: alias.name: The name returned by the mount configured via the mount_accessor parameter If blank, the Alias's name field will be used as-is.  # noqa: E501

        :param username_format: The username_format of this Body65.  # noqa: E501
        :type: str
        """

        self._username_format = username_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body65, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body65):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
