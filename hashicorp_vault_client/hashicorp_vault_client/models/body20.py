# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.  # noqa: E501

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body20(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disabled': 'bool',
        'id': 'str',
        'metadata': 'object',
        'policies': 'list[str]'
    }

    attribute_map = {
        'disabled': 'disabled',
        'id': 'id',
        'metadata': 'metadata',
        'policies': 'policies'
    }

    def __init__(self, disabled=None, id=None, metadata=None, policies=None):  # noqa: E501
        """Body20 - a model defined in Swagger"""  # noqa: E501
        self._disabled = None
        self._id = None
        self._metadata = None
        self._policies = None
        self.discriminator = None
        if disabled is not None:
            self.disabled = disabled
        if id is not None:
            self.id = id
        if metadata is not None:
            self.metadata = metadata
        if policies is not None:
            self.policies = policies

    @property
    def disabled(self):
        """Gets the disabled of this Body20.  # noqa: E501

        If set true, tokens tied to this identity will not be able to be used (but will not be revoked).  # noqa: E501

        :return: The disabled of this Body20.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Body20.

        If set true, tokens tied to this identity will not be able to be used (but will not be revoked).  # noqa: E501

        :param disabled: The disabled of this Body20.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def id(self):
        """Gets the id of this Body20.  # noqa: E501

        ID of the entity. If set, updates the corresponding existing entity.  # noqa: E501

        :return: The id of this Body20.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Body20.

        ID of the entity. If set, updates the corresponding existing entity.  # noqa: E501

        :param id: The id of this Body20.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this Body20.  # noqa: E501

        Metadata to be associated with the entity. In CLI, this parameter can be repeated multiple times, and it all gets merged together. For example: vault <command> <path> metadata=key1=value1 metadata=key2=value2  # noqa: E501

        :return: The metadata of this Body20.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Body20.

        Metadata to be associated with the entity. In CLI, this parameter can be repeated multiple times, and it all gets merged together. For example: vault <command> <path> metadata=key1=value1 metadata=key2=value2  # noqa: E501

        :param metadata: The metadata of this Body20.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def policies(self):
        """Gets the policies of this Body20.  # noqa: E501

        Policies to be tied to the entity.  # noqa: E501

        :return: The policies of this Body20.  # noqa: E501
        :rtype: list[str]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this Body20.

        Policies to be tied to the entity.  # noqa: E501

        :param policies: The policies of this Body20.  # noqa: E501
        :type: list[str]
        """

        self._policies = policies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body20, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body20):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
