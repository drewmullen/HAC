# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.  # noqa: E501

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body106(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ca_file': 'str',
        'ca_path': 'str',
        'client_cert_pem': 'str',
        'client_key_pem': 'str',
        'primary_api_addr': 'str',
        'token': 'str'
    }

    attribute_map = {
        'ca_file': 'ca_file',
        'ca_path': 'ca_path',
        'client_cert_pem': 'client_cert_pem',
        'client_key_pem': 'client_key_pem',
        'primary_api_addr': 'primary_api_addr',
        'token': 'token'
    }

    def __init__(self, ca_file=None, ca_path=None, client_cert_pem=None, client_key_pem=None, primary_api_addr=None, token=None):  # noqa: E501
        """Body106 - a model defined in Swagger"""  # noqa: E501
        self._ca_file = None
        self._ca_path = None
        self._client_cert_pem = None
        self._client_key_pem = None
        self._primary_api_addr = None
        self._token = None
        self.discriminator = None
        if ca_file is not None:
            self.ca_file = ca_file
        if ca_path is not None:
            self.ca_path = ca_path
        if client_cert_pem is not None:
            self.client_cert_pem = client_cert_pem
        if client_key_pem is not None:
            self.client_key_pem = client_key_pem
        if primary_api_addr is not None:
            self.primary_api_addr = primary_api_addr
        if token is not None:
            self.token = token

    @property
    def ca_file(self):
        """Gets the ca_file of this Body106.  # noqa: E501

        A path to a file containing a PEM-encoded CA certificate to verify the call against the primary's API address  # noqa: E501

        :return: The ca_file of this Body106.  # noqa: E501
        :rtype: str
        """
        return self._ca_file

    @ca_file.setter
    def ca_file(self, ca_file):
        """Sets the ca_file of this Body106.

        A path to a file containing a PEM-encoded CA certificate to verify the call against the primary's API address  # noqa: E501

        :param ca_file: The ca_file of this Body106.  # noqa: E501
        :type: str
        """

        self._ca_file = ca_file

    @property
    def ca_path(self):
        """Gets the ca_path of this Body106.  # noqa: E501

        A path to a directory containing PEM-encoded CA certificates to verify the call against the primary's API address  # noqa: E501

        :return: The ca_path of this Body106.  # noqa: E501
        :rtype: str
        """
        return self._ca_path

    @ca_path.setter
    def ca_path(self, ca_path):
        """Sets the ca_path of this Body106.

        A path to a directory containing PEM-encoded CA certificates to verify the call against the primary's API address  # noqa: E501

        :param ca_path: The ca_path of this Body106.  # noqa: E501
        :type: str
        """

        self._ca_path = ca_path

    @property
    def client_cert_pem(self):
        """Gets the client_cert_pem of this Body106.  # noqa: E501

        The client certificate to use for authentication, in PEM format. Note: client authentication for this operation will always use TLS 1.2 or higher.  # noqa: E501

        :return: The client_cert_pem of this Body106.  # noqa: E501
        :rtype: str
        """
        return self._client_cert_pem

    @client_cert_pem.setter
    def client_cert_pem(self, client_cert_pem):
        """Sets the client_cert_pem of this Body106.

        The client certificate to use for authentication, in PEM format. Note: client authentication for this operation will always use TLS 1.2 or higher.  # noqa: E501

        :param client_cert_pem: The client_cert_pem of this Body106.  # noqa: E501
        :type: str
        """

        self._client_cert_pem = client_cert_pem

    @property
    def client_key_pem(self):
        """Gets the client_key_pem of this Body106.  # noqa: E501

        The client key to use for authentication, in PEM format.  # noqa: E501

        :return: The client_key_pem of this Body106.  # noqa: E501
        :rtype: str
        """
        return self._client_key_pem

    @client_key_pem.setter
    def client_key_pem(self, client_key_pem):
        """Sets the client_key_pem of this Body106.

        The client key to use for authentication, in PEM format.  # noqa: E501

        :param client_key_pem: The client_key_pem of this Body106.  # noqa: E501
        :type: str
        """

        self._client_key_pem = client_key_pem

    @property
    def primary_api_addr(self):
        """Gets the primary_api_addr of this Body106.  # noqa: E501

        The API address of the primary. If not set, the value the primary supplies in the token will be used, which is the primary's redirect address.  # noqa: E501

        :return: The primary_api_addr of this Body106.  # noqa: E501
        :rtype: str
        """
        return self._primary_api_addr

    @primary_api_addr.setter
    def primary_api_addr(self, primary_api_addr):
        """Sets the primary_api_addr of this Body106.

        The API address of the primary. If not set, the value the primary supplies in the token will be used, which is the primary's redirect address.  # noqa: E501

        :param primary_api_addr: The primary_api_addr of this Body106.  # noqa: E501
        :type: str
        """

        self._primary_api_addr = primary_api_addr

    @property
    def token(self):
        """Gets the token of this Body106.  # noqa: E501

        The token given by the primary to activate secondary status for this cluster.  # noqa: E501

        :return: The token of this Body106.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Body106.

        The token given by the primary to activate secondary status for this cluster.  # noqa: E501

        :param token: The token of this Body106.  # noqa: E501
        :type: str
        """

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body106, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body106):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
