# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.  # noqa: E501

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_redirect_uris': 'list[str]',
        'bound_audiences': 'list[str]',
        'bound_cidrs': 'list[str]',
        'bound_claims': 'object',
        'bound_subject': 'str',
        'claim_mappings': 'object',
        'clock_skew_leeway': 'int',
        'expiration_leeway': 'int',
        'groups_claim': 'str',
        'max_ttl': 'int',
        'not_before_leeway': 'int',
        'num_uses': 'int',
        'oidc_scopes': 'list[str]',
        'period': 'int',
        'policies': 'list[str]',
        'role_type': 'str',
        'token_bound_cidrs': 'list[str]',
        'token_explicit_max_ttl': 'int',
        'token_max_ttl': 'int',
        'token_no_default_policy': 'bool',
        'token_num_uses': 'int',
        'token_period': 'int',
        'token_policies': 'list[str]',
        'token_ttl': 'int',
        'token_type': 'str',
        'ttl': 'int',
        'user_claim': 'str',
        'verbose_oidc_logging': 'bool'
    }

    attribute_map = {
        'allowed_redirect_uris': 'allowed_redirect_uris',
        'bound_audiences': 'bound_audiences',
        'bound_cidrs': 'bound_cidrs',
        'bound_claims': 'bound_claims',
        'bound_subject': 'bound_subject',
        'claim_mappings': 'claim_mappings',
        'clock_skew_leeway': 'clock_skew_leeway',
        'expiration_leeway': 'expiration_leeway',
        'groups_claim': 'groups_claim',
        'max_ttl': 'max_ttl',
        'not_before_leeway': 'not_before_leeway',
        'num_uses': 'num_uses',
        'oidc_scopes': 'oidc_scopes',
        'period': 'period',
        'policies': 'policies',
        'role_type': 'role_type',
        'token_bound_cidrs': 'token_bound_cidrs',
        'token_explicit_max_ttl': 'token_explicit_max_ttl',
        'token_max_ttl': 'token_max_ttl',
        'token_no_default_policy': 'token_no_default_policy',
        'token_num_uses': 'token_num_uses',
        'token_period': 'token_period',
        'token_policies': 'token_policies',
        'token_ttl': 'token_ttl',
        'token_type': 'token_type',
        'ttl': 'ttl',
        'user_claim': 'user_claim',
        'verbose_oidc_logging': 'verbose_oidc_logging'
    }

    def __init__(self, allowed_redirect_uris=None, bound_audiences=None, bound_cidrs=None, bound_claims=None, bound_subject=None, claim_mappings=None, clock_skew_leeway=None, expiration_leeway=150, groups_claim=None, max_ttl=None, not_before_leeway=150, num_uses=None, oidc_scopes=None, period=None, policies=None, role_type=None, token_bound_cidrs=None, token_explicit_max_ttl=None, token_max_ttl=None, token_no_default_policy=None, token_num_uses=None, token_period=None, token_policies=None, token_ttl=None, token_type='default-service', ttl=None, user_claim=None, verbose_oidc_logging=None):  # noqa: E501
        """Body3 - a model defined in Swagger"""  # noqa: E501
        self._allowed_redirect_uris = None
        self._bound_audiences = None
        self._bound_cidrs = None
        self._bound_claims = None
        self._bound_subject = None
        self._claim_mappings = None
        self._clock_skew_leeway = None
        self._expiration_leeway = None
        self._groups_claim = None
        self._max_ttl = None
        self._not_before_leeway = None
        self._num_uses = None
        self._oidc_scopes = None
        self._period = None
        self._policies = None
        self._role_type = None
        self._token_bound_cidrs = None
        self._token_explicit_max_ttl = None
        self._token_max_ttl = None
        self._token_no_default_policy = None
        self._token_num_uses = None
        self._token_period = None
        self._token_policies = None
        self._token_ttl = None
        self._token_type = None
        self._ttl = None
        self._user_claim = None
        self._verbose_oidc_logging = None
        self.discriminator = None
        if allowed_redirect_uris is not None:
            self.allowed_redirect_uris = allowed_redirect_uris
        if bound_audiences is not None:
            self.bound_audiences = bound_audiences
        if bound_cidrs is not None:
            self.bound_cidrs = bound_cidrs
        if bound_claims is not None:
            self.bound_claims = bound_claims
        if bound_subject is not None:
            self.bound_subject = bound_subject
        if claim_mappings is not None:
            self.claim_mappings = claim_mappings
        if clock_skew_leeway is not None:
            self.clock_skew_leeway = clock_skew_leeway
        if expiration_leeway is not None:
            self.expiration_leeway = expiration_leeway
        if groups_claim is not None:
            self.groups_claim = groups_claim
        if max_ttl is not None:
            self.max_ttl = max_ttl
        if not_before_leeway is not None:
            self.not_before_leeway = not_before_leeway
        if num_uses is not None:
            self.num_uses = num_uses
        if oidc_scopes is not None:
            self.oidc_scopes = oidc_scopes
        if period is not None:
            self.period = period
        if policies is not None:
            self.policies = policies
        if role_type is not None:
            self.role_type = role_type
        if token_bound_cidrs is not None:
            self.token_bound_cidrs = token_bound_cidrs
        if token_explicit_max_ttl is not None:
            self.token_explicit_max_ttl = token_explicit_max_ttl
        if token_max_ttl is not None:
            self.token_max_ttl = token_max_ttl
        if token_no_default_policy is not None:
            self.token_no_default_policy = token_no_default_policy
        if token_num_uses is not None:
            self.token_num_uses = token_num_uses
        if token_period is not None:
            self.token_period = token_period
        if token_policies is not None:
            self.token_policies = token_policies
        if token_ttl is not None:
            self.token_ttl = token_ttl
        if token_type is not None:
            self.token_type = token_type
        if ttl is not None:
            self.ttl = ttl
        if user_claim is not None:
            self.user_claim = user_claim
        if verbose_oidc_logging is not None:
            self.verbose_oidc_logging = verbose_oidc_logging

    @property
    def allowed_redirect_uris(self):
        """Gets the allowed_redirect_uris of this Body3.  # noqa: E501

        Comma-separated list of allowed values for redirect_uri  # noqa: E501

        :return: The allowed_redirect_uris of this Body3.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_redirect_uris

    @allowed_redirect_uris.setter
    def allowed_redirect_uris(self, allowed_redirect_uris):
        """Sets the allowed_redirect_uris of this Body3.

        Comma-separated list of allowed values for redirect_uri  # noqa: E501

        :param allowed_redirect_uris: The allowed_redirect_uris of this Body3.  # noqa: E501
        :type: list[str]
        """

        self._allowed_redirect_uris = allowed_redirect_uris

    @property
    def bound_audiences(self):
        """Gets the bound_audiences of this Body3.  # noqa: E501

        Comma-separated list of 'aud' claims that are valid for login; any match is sufficient  # noqa: E501

        :return: The bound_audiences of this Body3.  # noqa: E501
        :rtype: list[str]
        """
        return self._bound_audiences

    @bound_audiences.setter
    def bound_audiences(self, bound_audiences):
        """Sets the bound_audiences of this Body3.

        Comma-separated list of 'aud' claims that are valid for login; any match is sufficient  # noqa: E501

        :param bound_audiences: The bound_audiences of this Body3.  # noqa: E501
        :type: list[str]
        """

        self._bound_audiences = bound_audiences

    @property
    def bound_cidrs(self):
        """Gets the bound_cidrs of this Body3.  # noqa: E501

        Use \"token_bound_cidrs\" instead. If this and \"token_bound_cidrs\" are both specified, only \"token_bound_cidrs\" will be used.  # noqa: E501

        :return: The bound_cidrs of this Body3.  # noqa: E501
        :rtype: list[str]
        """
        return self._bound_cidrs

    @bound_cidrs.setter
    def bound_cidrs(self, bound_cidrs):
        """Sets the bound_cidrs of this Body3.

        Use \"token_bound_cidrs\" instead. If this and \"token_bound_cidrs\" are both specified, only \"token_bound_cidrs\" will be used.  # noqa: E501

        :param bound_cidrs: The bound_cidrs of this Body3.  # noqa: E501
        :type: list[str]
        """

        self._bound_cidrs = bound_cidrs

    @property
    def bound_claims(self):
        """Gets the bound_claims of this Body3.  # noqa: E501

        Map of claims/values which must match for login  # noqa: E501

        :return: The bound_claims of this Body3.  # noqa: E501
        :rtype: object
        """
        return self._bound_claims

    @bound_claims.setter
    def bound_claims(self, bound_claims):
        """Sets the bound_claims of this Body3.

        Map of claims/values which must match for login  # noqa: E501

        :param bound_claims: The bound_claims of this Body3.  # noqa: E501
        :type: object
        """

        self._bound_claims = bound_claims

    @property
    def bound_subject(self):
        """Gets the bound_subject of this Body3.  # noqa: E501

        The 'sub' claim that is valid for login. Optional.  # noqa: E501

        :return: The bound_subject of this Body3.  # noqa: E501
        :rtype: str
        """
        return self._bound_subject

    @bound_subject.setter
    def bound_subject(self, bound_subject):
        """Sets the bound_subject of this Body3.

        The 'sub' claim that is valid for login. Optional.  # noqa: E501

        :param bound_subject: The bound_subject of this Body3.  # noqa: E501
        :type: str
        """

        self._bound_subject = bound_subject

    @property
    def claim_mappings(self):
        """Gets the claim_mappings of this Body3.  # noqa: E501

        Mappings of claims (key) that will be copied to a metadata field (value)  # noqa: E501

        :return: The claim_mappings of this Body3.  # noqa: E501
        :rtype: object
        """
        return self._claim_mappings

    @claim_mappings.setter
    def claim_mappings(self, claim_mappings):
        """Sets the claim_mappings of this Body3.

        Mappings of claims (key) that will be copied to a metadata field (value)  # noqa: E501

        :param claim_mappings: The claim_mappings of this Body3.  # noqa: E501
        :type: object
        """

        self._claim_mappings = claim_mappings

    @property
    def clock_skew_leeway(self):
        """Gets the clock_skew_leeway of this Body3.  # noqa: E501

        Duration in seconds of leeway when validating all claims to account for clock skew. Defaults to 60 (1 minute) if set to 0 and can be disabled if set to -1.  # noqa: E501

        :return: The clock_skew_leeway of this Body3.  # noqa: E501
        :rtype: int
        """
        return self._clock_skew_leeway

    @clock_skew_leeway.setter
    def clock_skew_leeway(self, clock_skew_leeway):
        """Sets the clock_skew_leeway of this Body3.

        Duration in seconds of leeway when validating all claims to account for clock skew. Defaults to 60 (1 minute) if set to 0 and can be disabled if set to -1.  # noqa: E501

        :param clock_skew_leeway: The clock_skew_leeway of this Body3.  # noqa: E501
        :type: int
        """

        self._clock_skew_leeway = clock_skew_leeway

    @property
    def expiration_leeway(self):
        """Gets the expiration_leeway of this Body3.  # noqa: E501

        Duration in seconds of leeway when validating expiration of a token to account for clock skew. Defaults to 150 (2.5 minutes) if set to 0 and can be disabled if set to -1.  # noqa: E501

        :return: The expiration_leeway of this Body3.  # noqa: E501
        :rtype: int
        """
        return self._expiration_leeway

    @expiration_leeway.setter
    def expiration_leeway(self, expiration_leeway):
        """Sets the expiration_leeway of this Body3.

        Duration in seconds of leeway when validating expiration of a token to account for clock skew. Defaults to 150 (2.5 minutes) if set to 0 and can be disabled if set to -1.  # noqa: E501

        :param expiration_leeway: The expiration_leeway of this Body3.  # noqa: E501
        :type: int
        """

        self._expiration_leeway = expiration_leeway

    @property
    def groups_claim(self):
        """Gets the groups_claim of this Body3.  # noqa: E501

        The claim to use for the Identity group alias names  # noqa: E501

        :return: The groups_claim of this Body3.  # noqa: E501
        :rtype: str
        """
        return self._groups_claim

    @groups_claim.setter
    def groups_claim(self, groups_claim):
        """Sets the groups_claim of this Body3.

        The claim to use for the Identity group alias names  # noqa: E501

        :param groups_claim: The groups_claim of this Body3.  # noqa: E501
        :type: str
        """

        self._groups_claim = groups_claim

    @property
    def max_ttl(self):
        """Gets the max_ttl of this Body3.  # noqa: E501

        Use \"token_max_ttl\" instead. If this and \"token_max_ttl\" are both specified, only \"token_max_ttl\" will be used.  # noqa: E501

        :return: The max_ttl of this Body3.  # noqa: E501
        :rtype: int
        """
        return self._max_ttl

    @max_ttl.setter
    def max_ttl(self, max_ttl):
        """Sets the max_ttl of this Body3.

        Use \"token_max_ttl\" instead. If this and \"token_max_ttl\" are both specified, only \"token_max_ttl\" will be used.  # noqa: E501

        :param max_ttl: The max_ttl of this Body3.  # noqa: E501
        :type: int
        """

        self._max_ttl = max_ttl

    @property
    def not_before_leeway(self):
        """Gets the not_before_leeway of this Body3.  # noqa: E501

        Duration in seconds of leeway when validating not before values of a token to account for clock skew. Defaults to 150 (2.5 minutes) if set to 0 and can be disabled if set to -1.  # noqa: E501

        :return: The not_before_leeway of this Body3.  # noqa: E501
        :rtype: int
        """
        return self._not_before_leeway

    @not_before_leeway.setter
    def not_before_leeway(self, not_before_leeway):
        """Sets the not_before_leeway of this Body3.

        Duration in seconds of leeway when validating not before values of a token to account for clock skew. Defaults to 150 (2.5 minutes) if set to 0 and can be disabled if set to -1.  # noqa: E501

        :param not_before_leeway: The not_before_leeway of this Body3.  # noqa: E501
        :type: int
        """

        self._not_before_leeway = not_before_leeway

    @property
    def num_uses(self):
        """Gets the num_uses of this Body3.  # noqa: E501

        Use \"token_num_uses\" instead. If this and \"token_num_uses\" are both specified, only \"token_num_uses\" will be used.  # noqa: E501

        :return: The num_uses of this Body3.  # noqa: E501
        :rtype: int
        """
        return self._num_uses

    @num_uses.setter
    def num_uses(self, num_uses):
        """Sets the num_uses of this Body3.

        Use \"token_num_uses\" instead. If this and \"token_num_uses\" are both specified, only \"token_num_uses\" will be used.  # noqa: E501

        :param num_uses: The num_uses of this Body3.  # noqa: E501
        :type: int
        """

        self._num_uses = num_uses

    @property
    def oidc_scopes(self):
        """Gets the oidc_scopes of this Body3.  # noqa: E501

        Comma-separated list of OIDC scopes  # noqa: E501

        :return: The oidc_scopes of this Body3.  # noqa: E501
        :rtype: list[str]
        """
        return self._oidc_scopes

    @oidc_scopes.setter
    def oidc_scopes(self, oidc_scopes):
        """Sets the oidc_scopes of this Body3.

        Comma-separated list of OIDC scopes  # noqa: E501

        :param oidc_scopes: The oidc_scopes of this Body3.  # noqa: E501
        :type: list[str]
        """

        self._oidc_scopes = oidc_scopes

    @property
    def period(self):
        """Gets the period of this Body3.  # noqa: E501

        Use \"token_period\" instead. If this and \"token_period\" are both specified, only \"token_period\" will be used.  # noqa: E501

        :return: The period of this Body3.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Body3.

        Use \"token_period\" instead. If this and \"token_period\" are both specified, only \"token_period\" will be used.  # noqa: E501

        :param period: The period of this Body3.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def policies(self):
        """Gets the policies of this Body3.  # noqa: E501

        Use \"token_policies\" instead. If this and \"token_policies\" are both specified, only \"token_policies\" will be used.  # noqa: E501

        :return: The policies of this Body3.  # noqa: E501
        :rtype: list[str]
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this Body3.

        Use \"token_policies\" instead. If this and \"token_policies\" are both specified, only \"token_policies\" will be used.  # noqa: E501

        :param policies: The policies of this Body3.  # noqa: E501
        :type: list[str]
        """

        self._policies = policies

    @property
    def role_type(self):
        """Gets the role_type of this Body3.  # noqa: E501

        Type of the role, either 'jwt' or 'oidc'.  # noqa: E501

        :return: The role_type of this Body3.  # noqa: E501
        :rtype: str
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """Sets the role_type of this Body3.

        Type of the role, either 'jwt' or 'oidc'.  # noqa: E501

        :param role_type: The role_type of this Body3.  # noqa: E501
        :type: str
        """

        self._role_type = role_type

    @property
    def token_bound_cidrs(self):
        """Gets the token_bound_cidrs of this Body3.  # noqa: E501

        Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.  # noqa: E501

        :return: The token_bound_cidrs of this Body3.  # noqa: E501
        :rtype: list[str]
        """
        return self._token_bound_cidrs

    @token_bound_cidrs.setter
    def token_bound_cidrs(self, token_bound_cidrs):
        """Sets the token_bound_cidrs of this Body3.

        Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.  # noqa: E501

        :param token_bound_cidrs: The token_bound_cidrs of this Body3.  # noqa: E501
        :type: list[str]
        """

        self._token_bound_cidrs = token_bound_cidrs

    @property
    def token_explicit_max_ttl(self):
        """Gets the token_explicit_max_ttl of this Body3.  # noqa: E501

        If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.  # noqa: E501

        :return: The token_explicit_max_ttl of this Body3.  # noqa: E501
        :rtype: int
        """
        return self._token_explicit_max_ttl

    @token_explicit_max_ttl.setter
    def token_explicit_max_ttl(self, token_explicit_max_ttl):
        """Sets the token_explicit_max_ttl of this Body3.

        If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.  # noqa: E501

        :param token_explicit_max_ttl: The token_explicit_max_ttl of this Body3.  # noqa: E501
        :type: int
        """

        self._token_explicit_max_ttl = token_explicit_max_ttl

    @property
    def token_max_ttl(self):
        """Gets the token_max_ttl of this Body3.  # noqa: E501

        The maximum lifetime of the generated token  # noqa: E501

        :return: The token_max_ttl of this Body3.  # noqa: E501
        :rtype: int
        """
        return self._token_max_ttl

    @token_max_ttl.setter
    def token_max_ttl(self, token_max_ttl):
        """Sets the token_max_ttl of this Body3.

        The maximum lifetime of the generated token  # noqa: E501

        :param token_max_ttl: The token_max_ttl of this Body3.  # noqa: E501
        :type: int
        """

        self._token_max_ttl = token_max_ttl

    @property
    def token_no_default_policy(self):
        """Gets the token_no_default_policy of this Body3.  # noqa: E501

        If true, the 'default' policy will not automatically be added to generated tokens  # noqa: E501

        :return: The token_no_default_policy of this Body3.  # noqa: E501
        :rtype: bool
        """
        return self._token_no_default_policy

    @token_no_default_policy.setter
    def token_no_default_policy(self, token_no_default_policy):
        """Sets the token_no_default_policy of this Body3.

        If true, the 'default' policy will not automatically be added to generated tokens  # noqa: E501

        :param token_no_default_policy: The token_no_default_policy of this Body3.  # noqa: E501
        :type: bool
        """

        self._token_no_default_policy = token_no_default_policy

    @property
    def token_num_uses(self):
        """Gets the token_num_uses of this Body3.  # noqa: E501

        The maximum number of times a token may be used, a value of zero means unlimited  # noqa: E501

        :return: The token_num_uses of this Body3.  # noqa: E501
        :rtype: int
        """
        return self._token_num_uses

    @token_num_uses.setter
    def token_num_uses(self, token_num_uses):
        """Sets the token_num_uses of this Body3.

        The maximum number of times a token may be used, a value of zero means unlimited  # noqa: E501

        :param token_num_uses: The token_num_uses of this Body3.  # noqa: E501
        :type: int
        """

        self._token_num_uses = token_num_uses

    @property
    def token_period(self):
        """Gets the token_period of this Body3.  # noqa: E501

        If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. \"24h\").  # noqa: E501

        :return: The token_period of this Body3.  # noqa: E501
        :rtype: int
        """
        return self._token_period

    @token_period.setter
    def token_period(self, token_period):
        """Sets the token_period of this Body3.

        If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. \"24h\").  # noqa: E501

        :param token_period: The token_period of this Body3.  # noqa: E501
        :type: int
        """

        self._token_period = token_period

    @property
    def token_policies(self):
        """Gets the token_policies of this Body3.  # noqa: E501

        Comma-separated list of policies  # noqa: E501

        :return: The token_policies of this Body3.  # noqa: E501
        :rtype: list[str]
        """
        return self._token_policies

    @token_policies.setter
    def token_policies(self, token_policies):
        """Sets the token_policies of this Body3.

        Comma-separated list of policies  # noqa: E501

        :param token_policies: The token_policies of this Body3.  # noqa: E501
        :type: list[str]
        """

        self._token_policies = token_policies

    @property
    def token_ttl(self):
        """Gets the token_ttl of this Body3.  # noqa: E501

        The initial ttl of the token to generate  # noqa: E501

        :return: The token_ttl of this Body3.  # noqa: E501
        :rtype: int
        """
        return self._token_ttl

    @token_ttl.setter
    def token_ttl(self, token_ttl):
        """Sets the token_ttl of this Body3.

        The initial ttl of the token to generate  # noqa: E501

        :param token_ttl: The token_ttl of this Body3.  # noqa: E501
        :type: int
        """

        self._token_ttl = token_ttl

    @property
    def token_type(self):
        """Gets the token_type of this Body3.  # noqa: E501

        The type of token to generate, service or batch  # noqa: E501

        :return: The token_type of this Body3.  # noqa: E501
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this Body3.

        The type of token to generate, service or batch  # noqa: E501

        :param token_type: The token_type of this Body3.  # noqa: E501
        :type: str
        """

        self._token_type = token_type

    @property
    def ttl(self):
        """Gets the ttl of this Body3.  # noqa: E501

        Use \"token_ttl\" instead. If this and \"token_ttl\" are both specified, only \"token_ttl\" will be used.  # noqa: E501

        :return: The ttl of this Body3.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this Body3.

        Use \"token_ttl\" instead. If this and \"token_ttl\" are both specified, only \"token_ttl\" will be used.  # noqa: E501

        :param ttl: The ttl of this Body3.  # noqa: E501
        :type: int
        """

        self._ttl = ttl

    @property
    def user_claim(self):
        """Gets the user_claim of this Body3.  # noqa: E501

        The claim to use for the Identity entity alias name  # noqa: E501

        :return: The user_claim of this Body3.  # noqa: E501
        :rtype: str
        """
        return self._user_claim

    @user_claim.setter
    def user_claim(self, user_claim):
        """Sets the user_claim of this Body3.

        The claim to use for the Identity entity alias name  # noqa: E501

        :param user_claim: The user_claim of this Body3.  # noqa: E501
        :type: str
        """

        self._user_claim = user_claim

    @property
    def verbose_oidc_logging(self):
        """Gets the verbose_oidc_logging of this Body3.  # noqa: E501

        Log received OIDC tokens and claims when debug-level logging is active. Not recommended in production since sensitive information may be present in OIDC responses.  # noqa: E501

        :return: The verbose_oidc_logging of this Body3.  # noqa: E501
        :rtype: bool
        """
        return self._verbose_oidc_logging

    @verbose_oidc_logging.setter
    def verbose_oidc_logging(self, verbose_oidc_logging):
        """Sets the verbose_oidc_logging of this Body3.

        Log received OIDC tokens and claims when debug-level logging is active. Not recommended in production since sensitive information may be present in OIDC responses.  # noqa: E501

        :param verbose_oidc_logging: The verbose_oidc_logging of this Body3.  # noqa: E501
        :type: bool
        """

        self._verbose_oidc_logging = verbose_oidc_logging

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
