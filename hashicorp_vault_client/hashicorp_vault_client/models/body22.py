# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.  # noqa: E501

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body22(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'canonical_id': 'str',
        'id': 'str',
        'mount_accessor': 'str',
        'name': 'str'
    }

    attribute_map = {
        'canonical_id': 'canonical_id',
        'id': 'id',
        'mount_accessor': 'mount_accessor',
        'name': 'name'
    }

    def __init__(self, canonical_id=None, id=None, mount_accessor=None, name=None):  # noqa: E501
        """Body22 - a model defined in Swagger"""  # noqa: E501
        self._canonical_id = None
        self._id = None
        self._mount_accessor = None
        self._name = None
        self.discriminator = None
        if canonical_id is not None:
            self.canonical_id = canonical_id
        if id is not None:
            self.id = id
        if mount_accessor is not None:
            self.mount_accessor = mount_accessor
        if name is not None:
            self.name = name

    @property
    def canonical_id(self):
        """Gets the canonical_id of this Body22.  # noqa: E501

        ID of the group to which this is an alias.  # noqa: E501

        :return: The canonical_id of this Body22.  # noqa: E501
        :rtype: str
        """
        return self._canonical_id

    @canonical_id.setter
    def canonical_id(self, canonical_id):
        """Sets the canonical_id of this Body22.

        ID of the group to which this is an alias.  # noqa: E501

        :param canonical_id: The canonical_id of this Body22.  # noqa: E501
        :type: str
        """

        self._canonical_id = canonical_id

    @property
    def id(self):
        """Gets the id of this Body22.  # noqa: E501

        ID of the group alias.  # noqa: E501

        :return: The id of this Body22.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Body22.

        ID of the group alias.  # noqa: E501

        :param id: The id of this Body22.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mount_accessor(self):
        """Gets the mount_accessor of this Body22.  # noqa: E501

        Mount accessor to which this alias belongs to.  # noqa: E501

        :return: The mount_accessor of this Body22.  # noqa: E501
        :rtype: str
        """
        return self._mount_accessor

    @mount_accessor.setter
    def mount_accessor(self, mount_accessor):
        """Sets the mount_accessor of this Body22.

        Mount accessor to which this alias belongs to.  # noqa: E501

        :param mount_accessor: The mount_accessor of this Body22.  # noqa: E501
        :type: str
        """

        self._mount_accessor = mount_accessor

    @property
    def name(self):
        """Gets the name of this Body22.  # noqa: E501

        Alias of the group.  # noqa: E501

        :return: The name of this Body22.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Body22.

        Alias of the group.  # noqa: E501

        :param name: The name of this Body22.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body22, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body22):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
