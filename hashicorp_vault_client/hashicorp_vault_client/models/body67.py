# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.  # noqa: E501

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body67(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mount_accessor': 'str',
        'settings_file_base64': 'str',
        'username_format': 'str'
    }

    attribute_map = {
        'mount_accessor': 'mount_accessor',
        'settings_file_base64': 'settings_file_base64',
        'username_format': 'username_format'
    }

    def __init__(self, mount_accessor=None, settings_file_base64=None, username_format=None):  # noqa: E501
        """Body67 - a model defined in Swagger"""  # noqa: E501
        self._mount_accessor = None
        self._settings_file_base64 = None
        self._username_format = None
        self.discriminator = None
        if mount_accessor is not None:
            self.mount_accessor = mount_accessor
        if settings_file_base64 is not None:
            self.settings_file_base64 = settings_file_base64
        if username_format is not None:
            self.username_format = username_format

    @property
    def mount_accessor(self):
        """Gets the mount_accessor of this Body67.  # noqa: E501

        The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.  # noqa: E501

        :return: The mount_accessor of this Body67.  # noqa: E501
        :rtype: str
        """
        return self._mount_accessor

    @mount_accessor.setter
    def mount_accessor(self, mount_accessor):
        """Sets the mount_accessor of this Body67.

        The mount to tie this method to for use in automatic mappings. The mapping will use the Name field of Aliases associated with this mount as the username in the mapping.  # noqa: E501

        :param mount_accessor: The mount_accessor of this Body67.  # noqa: E501
        :type: str
        """

        self._mount_accessor = mount_accessor

    @property
    def settings_file_base64(self):
        """Gets the settings_file_base64 of this Body67.  # noqa: E501

        The settings file provided by Ping, Base64-encoded. This must be a settings file suitable for third-party clients, not the PingID SDK or PingFederate.  # noqa: E501

        :return: The settings_file_base64 of this Body67.  # noqa: E501
        :rtype: str
        """
        return self._settings_file_base64

    @settings_file_base64.setter
    def settings_file_base64(self, settings_file_base64):
        """Sets the settings_file_base64 of this Body67.

        The settings file provided by Ping, Base64-encoded. This must be a settings file suitable for third-party clients, not the PingID SDK or PingFederate.  # noqa: E501

        :param settings_file_base64: The settings_file_base64 of this Body67.  # noqa: E501
        :type: str
        """

        self._settings_file_base64 = settings_file_base64

    @property
    def username_format(self):
        """Gets the username_format of this Body67.  # noqa: E501

        A format string for mapping Identity names to MFA method names. Values to subtitute should be placed in {{}}. For example, \"{{alias.name}}@example.com\". Currently-supported mappings: alias.name: The name returned by the mount configured via the mount_accessor parameter If blank, the Alias's name field will be used as-is.  # noqa: E501

        :return: The username_format of this Body67.  # noqa: E501
        :rtype: str
        """
        return self._username_format

    @username_format.setter
    def username_format(self, username_format):
        """Sets the username_format of this Body67.

        A format string for mapping Identity names to MFA method names. Values to subtitute should be placed in {{}}. For example, \"{{alias.name}}@example.com\". Currently-supported mappings: alias.name: The name returned by the mount configured via the mount_accessor parameter If blank, the Alias's name field will be used as-is.  # noqa: E501

        :param username_format: The username_format of this Body67.  # noqa: E501
        :type: str
        """

        self._username_format = username_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body67, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body67):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
