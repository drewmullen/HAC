# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.  # noqa: E501

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bound_issuer': 'str',
        'default_role': 'str',
        'jwks_ca_pem': 'str',
        'jwks_url': 'str',
        'jwt_supported_algs': 'list[str]',
        'jwt_validation_pubkeys': 'list[str]',
        'oidc_client_id': 'str',
        'oidc_client_secret': 'str',
        'oidc_discovery_ca_pem': 'str',
        'oidc_discovery_url': 'str'
    }

    attribute_map = {
        'bound_issuer': 'bound_issuer',
        'default_role': 'default_role',
        'jwks_ca_pem': 'jwks_ca_pem',
        'jwks_url': 'jwks_url',
        'jwt_supported_algs': 'jwt_supported_algs',
        'jwt_validation_pubkeys': 'jwt_validation_pubkeys',
        'oidc_client_id': 'oidc_client_id',
        'oidc_client_secret': 'oidc_client_secret',
        'oidc_discovery_ca_pem': 'oidc_discovery_ca_pem',
        'oidc_discovery_url': 'oidc_discovery_url'
    }

    def __init__(self, bound_issuer=None, default_role=None, jwks_ca_pem=None, jwks_url=None, jwt_supported_algs=None, jwt_validation_pubkeys=None, oidc_client_id=None, oidc_client_secret=None, oidc_discovery_ca_pem=None, oidc_discovery_url=None):  # noqa: E501
        """Body - a model defined in Swagger"""  # noqa: E501
        self._bound_issuer = None
        self._default_role = None
        self._jwks_ca_pem = None
        self._jwks_url = None
        self._jwt_supported_algs = None
        self._jwt_validation_pubkeys = None
        self._oidc_client_id = None
        self._oidc_client_secret = None
        self._oidc_discovery_ca_pem = None
        self._oidc_discovery_url = None
        self.discriminator = None
        if bound_issuer is not None:
            self.bound_issuer = bound_issuer
        if default_role is not None:
            self.default_role = default_role
        if jwks_ca_pem is not None:
            self.jwks_ca_pem = jwks_ca_pem
        if jwks_url is not None:
            self.jwks_url = jwks_url
        if jwt_supported_algs is not None:
            self.jwt_supported_algs = jwt_supported_algs
        if jwt_validation_pubkeys is not None:
            self.jwt_validation_pubkeys = jwt_validation_pubkeys
        if oidc_client_id is not None:
            self.oidc_client_id = oidc_client_id
        if oidc_client_secret is not None:
            self.oidc_client_secret = oidc_client_secret
        if oidc_discovery_ca_pem is not None:
            self.oidc_discovery_ca_pem = oidc_discovery_ca_pem
        if oidc_discovery_url is not None:
            self.oidc_discovery_url = oidc_discovery_url

    @property
    def bound_issuer(self):
        """Gets the bound_issuer of this Body.  # noqa: E501

        The value against which to match the 'iss' claim in a JWT. Optional.  # noqa: E501

        :return: The bound_issuer of this Body.  # noqa: E501
        :rtype: str
        """
        return self._bound_issuer

    @bound_issuer.setter
    def bound_issuer(self, bound_issuer):
        """Sets the bound_issuer of this Body.

        The value against which to match the 'iss' claim in a JWT. Optional.  # noqa: E501

        :param bound_issuer: The bound_issuer of this Body.  # noqa: E501
        :type: str
        """

        self._bound_issuer = bound_issuer

    @property
    def default_role(self):
        """Gets the default_role of this Body.  # noqa: E501

        The default role to use if none is provided during login. If not set, a role is required during login.  # noqa: E501

        :return: The default_role of this Body.  # noqa: E501
        :rtype: str
        """
        return self._default_role

    @default_role.setter
    def default_role(self, default_role):
        """Sets the default_role of this Body.

        The default role to use if none is provided during login. If not set, a role is required during login.  # noqa: E501

        :param default_role: The default_role of this Body.  # noqa: E501
        :type: str
        """

        self._default_role = default_role

    @property
    def jwks_ca_pem(self):
        """Gets the jwks_ca_pem of this Body.  # noqa: E501

        The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.  # noqa: E501

        :return: The jwks_ca_pem of this Body.  # noqa: E501
        :rtype: str
        """
        return self._jwks_ca_pem

    @jwks_ca_pem.setter
    def jwks_ca_pem(self, jwks_ca_pem):
        """Sets the jwks_ca_pem of this Body.

        The CA certificate or chain of certificates, in PEM format, to use to validate connections to the JWKS URL. If not set, system certificates are used.  # noqa: E501

        :param jwks_ca_pem: The jwks_ca_pem of this Body.  # noqa: E501
        :type: str
        """

        self._jwks_ca_pem = jwks_ca_pem

    @property
    def jwks_url(self):
        """Gets the jwks_url of this Body.  # noqa: E501

        JWKS URL to use to authenticate signatures. Cannot be used with \"oidc_discovery_url\" or \"jwt_validation_pubkeys\".  # noqa: E501

        :return: The jwks_url of this Body.  # noqa: E501
        :rtype: str
        """
        return self._jwks_url

    @jwks_url.setter
    def jwks_url(self, jwks_url):
        """Sets the jwks_url of this Body.

        JWKS URL to use to authenticate signatures. Cannot be used with \"oidc_discovery_url\" or \"jwt_validation_pubkeys\".  # noqa: E501

        :param jwks_url: The jwks_url of this Body.  # noqa: E501
        :type: str
        """

        self._jwks_url = jwks_url

    @property
    def jwt_supported_algs(self):
        """Gets the jwt_supported_algs of this Body.  # noqa: E501

        A list of supported signing algorithms. Defaults to RS256.  # noqa: E501

        :return: The jwt_supported_algs of this Body.  # noqa: E501
        :rtype: list[str]
        """
        return self._jwt_supported_algs

    @jwt_supported_algs.setter
    def jwt_supported_algs(self, jwt_supported_algs):
        """Sets the jwt_supported_algs of this Body.

        A list of supported signing algorithms. Defaults to RS256.  # noqa: E501

        :param jwt_supported_algs: The jwt_supported_algs of this Body.  # noqa: E501
        :type: list[str]
        """

        self._jwt_supported_algs = jwt_supported_algs

    @property
    def jwt_validation_pubkeys(self):
        """Gets the jwt_validation_pubkeys of this Body.  # noqa: E501

        A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used with \"jwks_url\" or \"oidc_discovery_url\".  # noqa: E501

        :return: The jwt_validation_pubkeys of this Body.  # noqa: E501
        :rtype: list[str]
        """
        return self._jwt_validation_pubkeys

    @jwt_validation_pubkeys.setter
    def jwt_validation_pubkeys(self, jwt_validation_pubkeys):
        """Sets the jwt_validation_pubkeys of this Body.

        A list of PEM-encoded public keys to use to authenticate signatures locally. Cannot be used with \"jwks_url\" or \"oidc_discovery_url\".  # noqa: E501

        :param jwt_validation_pubkeys: The jwt_validation_pubkeys of this Body.  # noqa: E501
        :type: list[str]
        """

        self._jwt_validation_pubkeys = jwt_validation_pubkeys

    @property
    def oidc_client_id(self):
        """Gets the oidc_client_id of this Body.  # noqa: E501

        The OAuth Client ID configured with your OIDC provider.  # noqa: E501

        :return: The oidc_client_id of this Body.  # noqa: E501
        :rtype: str
        """
        return self._oidc_client_id

    @oidc_client_id.setter
    def oidc_client_id(self, oidc_client_id):
        """Sets the oidc_client_id of this Body.

        The OAuth Client ID configured with your OIDC provider.  # noqa: E501

        :param oidc_client_id: The oidc_client_id of this Body.  # noqa: E501
        :type: str
        """

        self._oidc_client_id = oidc_client_id

    @property
    def oidc_client_secret(self):
        """Gets the oidc_client_secret of this Body.  # noqa: E501

        The OAuth Client Secret configured with your OIDC provider.  # noqa: E501

        :return: The oidc_client_secret of this Body.  # noqa: E501
        :rtype: str
        """
        return self._oidc_client_secret

    @oidc_client_secret.setter
    def oidc_client_secret(self, oidc_client_secret):
        """Sets the oidc_client_secret of this Body.

        The OAuth Client Secret configured with your OIDC provider.  # noqa: E501

        :param oidc_client_secret: The oidc_client_secret of this Body.  # noqa: E501
        :type: str
        """

        self._oidc_client_secret = oidc_client_secret

    @property
    def oidc_discovery_ca_pem(self):
        """Gets the oidc_discovery_ca_pem of this Body.  # noqa: E501

        The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used.  # noqa: E501

        :return: The oidc_discovery_ca_pem of this Body.  # noqa: E501
        :rtype: str
        """
        return self._oidc_discovery_ca_pem

    @oidc_discovery_ca_pem.setter
    def oidc_discovery_ca_pem(self, oidc_discovery_ca_pem):
        """Sets the oidc_discovery_ca_pem of this Body.

        The CA certificate or chain of certificates, in PEM format, to use to validate connections to the OIDC Discovery URL. If not set, system certificates are used.  # noqa: E501

        :param oidc_discovery_ca_pem: The oidc_discovery_ca_pem of this Body.  # noqa: E501
        :type: str
        """

        self._oidc_discovery_ca_pem = oidc_discovery_ca_pem

    @property
    def oidc_discovery_url(self):
        """Gets the oidc_discovery_url of this Body.  # noqa: E501

        OIDC Discovery URL, without any .well-known component (base path). Cannot be used with \"jwks_url\" or \"jwt_validation_pubkeys\".  # noqa: E501

        :return: The oidc_discovery_url of this Body.  # noqa: E501
        :rtype: str
        """
        return self._oidc_discovery_url

    @oidc_discovery_url.setter
    def oidc_discovery_url(self, oidc_discovery_url):
        """Sets the oidc_discovery_url of this Body.

        OIDC Discovery URL, without any .well-known component (base path). Cannot be used with \"jwks_url\" or \"jwt_validation_pubkeys\".  # noqa: E501

        :param oidc_discovery_url: The oidc_discovery_url of this Body.  # noqa: E501
        :type: str
        """

        self._oidc_discovery_url = oidc_discovery_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
