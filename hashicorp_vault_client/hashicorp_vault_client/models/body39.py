# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.  # noqa: E501

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body39(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cas_required': 'bool',
        'delete_version_after': 'int',
        'max_versions': 'int'
    }

    attribute_map = {
        'cas_required': 'cas_required',
        'delete_version_after': 'delete_version_after',
        'max_versions': 'max_versions'
    }

    def __init__(self, cas_required=None, delete_version_after=None, max_versions=None):  # noqa: E501
        """Body39 - a model defined in Swagger"""  # noqa: E501
        self._cas_required = None
        self._delete_version_after = None
        self._max_versions = None
        self.discriminator = None
        if cas_required is not None:
            self.cas_required = cas_required
        if delete_version_after is not None:
            self.delete_version_after = delete_version_after
        if max_versions is not None:
            self.max_versions = max_versions

    @property
    def cas_required(self):
        """Gets the cas_required of this Body39.  # noqa: E501

        If true the key will require the cas parameter to be set on all write requests. If false, the backend’s configuration will be used.  # noqa: E501

        :return: The cas_required of this Body39.  # noqa: E501
        :rtype: bool
        """
        return self._cas_required

    @cas_required.setter
    def cas_required(self, cas_required):
        """Sets the cas_required of this Body39.

        If true the key will require the cas parameter to be set on all write requests. If false, the backend’s configuration will be used.  # noqa: E501

        :param cas_required: The cas_required of this Body39.  # noqa: E501
        :type: bool
        """

        self._cas_required = cas_required

    @property
    def delete_version_after(self):
        """Gets the delete_version_after of this Body39.  # noqa: E501

        The length of time before a version is deleted. If not set, the backend's configured delete_version_after is used. Cannot be greater than the backend's delete_version_after. A zero duration clears the current setting. A negative duration will cause an error.  # noqa: E501

        :return: The delete_version_after of this Body39.  # noqa: E501
        :rtype: int
        """
        return self._delete_version_after

    @delete_version_after.setter
    def delete_version_after(self, delete_version_after):
        """Sets the delete_version_after of this Body39.

        The length of time before a version is deleted. If not set, the backend's configured delete_version_after is used. Cannot be greater than the backend's delete_version_after. A zero duration clears the current setting. A negative duration will cause an error.  # noqa: E501

        :param delete_version_after: The delete_version_after of this Body39.  # noqa: E501
        :type: int
        """

        self._delete_version_after = delete_version_after

    @property
    def max_versions(self):
        """Gets the max_versions of this Body39.  # noqa: E501

        The number of versions to keep. If not set, the backend’s configured max version is used.  # noqa: E501

        :return: The max_versions of this Body39.  # noqa: E501
        :rtype: int
        """
        return self._max_versions

    @max_versions.setter
    def max_versions(self, max_versions):
        """Sets the max_versions of this Body39.

        The number of versions to keep. If not set, the backend’s configured max version is used.  # noqa: E501

        :param max_versions: The max_versions of this Body39.  # noqa: E501
        :type: int
        """

        self._max_versions = max_versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body39, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body39):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
