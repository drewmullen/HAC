# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.  # noqa: E501

    OpenAPI spec version: 1.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Body71(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'object',
        'description': 'str',
        'local': 'bool',
        'options': 'object',
        'plugin_name': 'str',
        'seal_wrap': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'config': 'config',
        'description': 'description',
        'local': 'local',
        'options': 'options',
        'plugin_name': 'plugin_name',
        'seal_wrap': 'seal_wrap',
        'type': 'type'
    }

    def __init__(self, config=None, description=None, local=False, options=None, plugin_name=None, seal_wrap=False, type=None):  # noqa: E501
        """Body71 - a model defined in Swagger"""  # noqa: E501
        self._config = None
        self._description = None
        self._local = None
        self._options = None
        self._plugin_name = None
        self._seal_wrap = None
        self._type = None
        self.discriminator = None
        if config is not None:
            self.config = config
        if description is not None:
            self.description = description
        if local is not None:
            self.local = local
        if options is not None:
            self.options = options
        if plugin_name is not None:
            self.plugin_name = plugin_name
        if seal_wrap is not None:
            self.seal_wrap = seal_wrap
        if type is not None:
            self.type = type

    @property
    def config(self):
        """Gets the config of this Body71.  # noqa: E501

        Configuration for this mount, such as default_lease_ttl and max_lease_ttl.  # noqa: E501

        :return: The config of this Body71.  # noqa: E501
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Body71.

        Configuration for this mount, such as default_lease_ttl and max_lease_ttl.  # noqa: E501

        :param config: The config of this Body71.  # noqa: E501
        :type: object
        """

        self._config = config

    @property
    def description(self):
        """Gets the description of this Body71.  # noqa: E501

        User-friendly description for this mount.  # noqa: E501

        :return: The description of this Body71.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Body71.

        User-friendly description for this mount.  # noqa: E501

        :param description: The description of this Body71.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def local(self):
        """Gets the local of this Body71.  # noqa: E501

        Mark the mount as a local mount, which is not replicated and is unaffected by replication.  # noqa: E501

        :return: The local of this Body71.  # noqa: E501
        :rtype: bool
        """
        return self._local

    @local.setter
    def local(self, local):
        """Sets the local of this Body71.

        Mark the mount as a local mount, which is not replicated and is unaffected by replication.  # noqa: E501

        :param local: The local of this Body71.  # noqa: E501
        :type: bool
        """

        self._local = local

    @property
    def options(self):
        """Gets the options of this Body71.  # noqa: E501

        The options to pass into the backend. Should be a json object with string keys and values.  # noqa: E501

        :return: The options of this Body71.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Body71.

        The options to pass into the backend. Should be a json object with string keys and values.  # noqa: E501

        :param options: The options of this Body71.  # noqa: E501
        :type: object
        """

        self._options = options

    @property
    def plugin_name(self):
        """Gets the plugin_name of this Body71.  # noqa: E501

        Name of the plugin to mount based from the name registered in the plugin catalog.  # noqa: E501

        :return: The plugin_name of this Body71.  # noqa: E501
        :rtype: str
        """
        return self._plugin_name

    @plugin_name.setter
    def plugin_name(self, plugin_name):
        """Sets the plugin_name of this Body71.

        Name of the plugin to mount based from the name registered in the plugin catalog.  # noqa: E501

        :param plugin_name: The plugin_name of this Body71.  # noqa: E501
        :type: str
        """

        self._plugin_name = plugin_name

    @property
    def seal_wrap(self):
        """Gets the seal_wrap of this Body71.  # noqa: E501

        Whether to turn on seal wrapping for the mount.  # noqa: E501

        :return: The seal_wrap of this Body71.  # noqa: E501
        :rtype: bool
        """
        return self._seal_wrap

    @seal_wrap.setter
    def seal_wrap(self, seal_wrap):
        """Sets the seal_wrap of this Body71.

        Whether to turn on seal wrapping for the mount.  # noqa: E501

        :param seal_wrap: The seal_wrap of this Body71.  # noqa: E501
        :type: bool
        """

        self._seal_wrap = seal_wrap

    @property
    def type(self):
        """Gets the type of this Body71.  # noqa: E501

        The type of the backend. Example: \"passthrough\"  # noqa: E501

        :return: The type of this Body71.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Body71.

        The type of the backend. Example: \"passthrough\"  # noqa: E501

        :param type: The type of this Body71.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body71, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body71):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
